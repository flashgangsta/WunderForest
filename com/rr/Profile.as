package com.rr {	import flash.utils.Dictionary;	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class Profile {				/// Список данных о пользователа из соц. сети		private var personalData:Object;		/// Список игровых данных о профиле пользователя		private var userData:Object;		/// Выбранный персонаж		private var _currentPersonage:PersonageData;		/// Список всех персонажей игрока		private var _personagesList:Vector.<PersonageData> = new Vector.<PersonageData>();		/// Список всех персонажей игрока отсортированный по их pid (идентификатор конкретного персонажа)		private var _personagesListByPID:Dictionary = new Dictionary();		/// Список всех предметов имеющихся у игрока		private var _itemsList:Vector.<ItemData> = new Vector.<ItemData>();		/// Список всех предмето по их iid (идентификатор конкретного предмета		private var _itemsListByPID:Dictionary = new Dictionary();		/// Список списков предметов отсортированных по области приенения		private var _itemsListByPlaceOfUsing:Dictionary = new Dictionary();		/// Список всех не нажетых предметов отсортированных по области применения		private var _freeItemsListByPlaceOfUsing:Dictionary = new Dictionary();		/// Список предметов экипировки имеющихся у игрока		private var _equipmentItemsList:Vector.<ItemData> = new Vector.<ItemData>();		/// Список предметов интерьера имеющихся у игрока		private var _interiorItemsList:Vector.<ItemData> = new Vector.<ItemData>();		/// Список предметов в рюкзак имеющихся у игрока		private var _bagItemsList:Vector.<ItemData> = new Vector.<ItemData>();		/// Список всех комнат имеющихся у игрока		private var _roomsList:Vector.<RoomData> = new Vector.<RoomData>();		/// Комнаты отсортированные по pid (идентификатор персонажа)		private var _roomsListByPID:Dictionary = new Dictionary();		/// Все одетые предметы по их IID		private var _allEqupedItemsByIID:Dictionary = new Dictionary();				/**		 * Конструктор		 */				public function Profile() {					}						/**		 * Запись профиля игрока		 * @param	personalData Список данных о пользователа из соц. сети		 * @param	userData Список игровых данных о профиле пользователя		 * @param	userItems Список купленных игроком предметов		 */				internal function record( personalData:Object, userData:Object ):void {			this.personalData = personalData;			this.userData = userData;						setHole( userData.hole );			setPersonages( userData.personages );			setItems( userData.items );						_currentPersonage = getPersonageDataByPID( userData.currentPid );					}				/**		 * Идентификатор игрока в соц сети		 */				public final function get uid():int {			return personalData.uid;		}				/**		 * Имя игрока в соц сети		 */				public final function get firstName():String {			return personalData.first_name;		}				/**		 * Фамилия игрока в соц сети		 */				public final function get lastName():String {			return personalData.last_name;		}				/**		 * Псевлоним игрока в соц сети		 */				public final function get nickName():String {			return personalData.nickname;		}				/**		 * Пол игрока в соц сети		 */				public final function get sex():int {			return int( personalData.sex );		}				/**		 * Ссылка на аватарку игрока		 */				public final function get photoPath():String {			return personalData.photo;		}				/**		 * Ссылка на аватарку игрока среднего размера		 */				public final function get photoMediumPath():String {			return personalData.photo_medium;		}				/**		 * Ссылка на аватарку игрока крупного размера		 */				public final function get photoBigPath():String {			return personalData.photo_big;		}				/**		 * Кол-во орехов игрока		 */				public final function get nuts():Number {			return userData.nuts;		}				/**		 * Кол-во золота игрока		 */				public final function get gold():Number {			return userData.gold;		}				/**		 * Рейтинг игрока		 */				public final function get rating():Number {			return userData.rating;		}				/**		 * Последний выбранный игроком персонаж		 */				public final function get currentPersonage():PersonageData {			return _currentPersonage;		}				/**		 * Возвразает список имеющихся персонажей		 * @return		 */				public final function get personagesList():Vector.<PersonageData> {			return _personagesList;		}				/**		 * Возвращает список всех имеющихся у игрока предметов		 */				public final function get itemsList():Vector.<ItemData> {			return _itemsList;		}				/**		 * Возвращает список предметов экипировки имеющихся у игрока		 */				public final function get equipmentItemsList():Vector.<ItemData> {			return _equipmentItemsList;		}				/**		 * Возвращает список предметов интерьера имеющихся у игрока		 */				public final function get interiorItemsList():Vector.<ItemData> {			return _interiorItemsList;		}						/**		 * Возвращает список предметов в рюкзак имеющихся у игрока		 */				public final function get bagItemsList():Vector.<ItemData> {			return _bagItemsList;		}				/**		 * Возвращает список имеющихся у игрока отсортированный по области применения		 */				public final function getItemsListByPlaceOfUsing( placeOfUsing:String ):Vector.<ItemData> {			///TODO: убедиться в надобности этого списка			return _itemsListByPlaceOfUsing[ placeOfUsing ];		}				/**		 * Возвращает список не надетых предметов игрока отсортированный по области применения		 * @param	placeOfUsing		 * @return		 */				public final function getFreeItemsListByPlaceOfUsing( placeOfUsing:String ):Vector.<ItemData> {			return _freeItemsListByPlaceOfUsing[ placeOfUsing ];		}				/**		 * Возвращает комнату персонажа по его идентификатору		 * @param	pid		 * @return		 */				public function getRoomDataByPID( pid:int ):RoomData {			return _roomsListByPID[ pid ];		}				/**		 * Возвращает данные пероснажа по его конкретному идентификатору		 * @param	pid		 * @return		 */				public function getPersonageDataByPID( pid:int ):PersonageData {			return _personagesListByPID[ pid ];		}				/**		 * Возвращает данные о предмете по его конкретному идентификатору		 * @param	iid		 */				public function getItemDataByIID( iid:int ):ItemData {			return _itemsListByPID[ iid ];		}				/**		 * Записывает персонажей в память		 * @param	list		 */				private final function setPersonages( list:Array ):void {			for ( var i:int = 0; i < list.length; i++ ) {				var currentData:PersonageData = new PersonageData( list[ i ] );				var equipmentList:Array = currentData.equipmentList;				_personagesList.push( currentData );				_personagesListByPID[ currentData.pid ] = currentData;								/// Записывает в словарь все одетые предметы на всех персонажах.				for ( var j:int = 0; j < equipmentList.length; j++ ) {					var itemIID:int = equipmentList[ j ];					if( itemIID ) _allEqupedItemsByIID[ equipmentList[ j ] ] = true;				}							}		}				/**		 * Записывает предметы в память		 * @param	list		 */				private function setItems( list:Array ):void {			for ( var i:int = 0; i < list.length; i++ ) {				var currentData:ItemData = new ItemData( list[ i ] );				var placeOfUsing:String = currentData.placeOfUsing;								_itemsList.push( currentData );				_itemsListByPID[ currentData.iid ] = currentData;								if ( currentData.isEquipment ) {					_equipmentItemsList.push( currentData );				} else if ( currentData.isInteriorItem ) {					_interiorItemsList.push( currentData );				} else if ( currentData.isBagItem ) {					_bagItemsList.push( currentData );				}								/// Записывает все не одетые предметы				if ( !_allEqupedItemsByIID[ currentData.iid ] ) {					if ( !_freeItemsListByPlaceOfUsing[ placeOfUsing ] ) {						_freeItemsListByPlaceOfUsing[ placeOfUsing ] = new Vector.<ItemData>();					}					_freeItemsListByPlaceOfUsing[ placeOfUsing ].push( currentData );				}								/// Записывает все предметы по области применения				if ( !_itemsListByPlaceOfUsing[ placeOfUsing ] ) {					_itemsListByPlaceOfUsing[ placeOfUsing ] = new Vector.<ItemData>();				}				_itemsListByPlaceOfUsing[ placeOfUsing ].push( currentData );			}		}				/**		 * Записывает список комнат в норе игрока		 * @param	list		 */				private function setHole( list:Array ):void {			for ( var i:int = 0; i < list.length; i++ ) {				var roomData:RoomData = new RoomData( list[ i ] );				_roomsList.push( roomData );				_roomsListByPID[ roomData.pid ] = roomData;			}		}	}}