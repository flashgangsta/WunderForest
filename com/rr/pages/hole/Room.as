package com.rr.pages.hole {		import com.rr.events.ContentLoaderEvent;	import com.rr.events.NavigationEvent;	import com.rr.events.RoomEvent;	import com.rr.Helper;	import com.rr.ItemModels;	import com.rr.PersonageData;	import com.rr.PersonagesPool;	import com.rr.RoomItemData;	import com.rr.ScreenController;	import com.rr.utils.MovieLoader;	import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.BitmapData;	import com.flashgangsta.managers.ButtonManager;	import flash.display.Shape;	import caurina.transitions.Tweener;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.geom.Matrix;	import flash.geom.PerspectiveProjection;	import flash.geom.Point;	import flash.geom.Rectangle;	import com.rr.personage.Personage;	import com.rr.RoomData;	import com.rr.utils.ContentLoader;	import flash.utils.Dictionary;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class Room extends MovieClip {				/// Значениие свойства rotationX объекта floorContainer		static private const FLOOR_ROTATION_X:int = -65;				/// Параметры комнаты		private var roomData:RoomData;		///		private var floorContainer:Sprite;		/// Пол		private var floor:Sprite;		/// Маска пола		private var floorMask:Sprite;		/// Стена		private var wall:MovieClip;		/// Доска		private var board:MovieClip;		/// Рюкзак		private var bag:MovieClip;		/// Переключатель света		private var switcher:MovieClip;		/// Тень комнаты при выключеном свете		private var roomShadow:Sprite;		/// Флаг света		private var light:Boolean = true;		/// Анимация включения света		private var lightMotion:Object = { useFrames: true, time: 1, transition: "easeInCubic" };		/// Место персонажа		private var personagePlace:MovieClip;		///		private var personagePlaceBounds:Rectangle;		/// Контейнер персонажа		private var persContainer:Sprite;		/// Параметры персонажа		private var personageData:PersonageData;		/// Шнкр лампы		private var cord:MovieClip;		/// Lamp		private var lamp:MovieClip;		/// Персонаж		internal var personage:Personage; 		/// Флаг отображает загружены ли предметы комнаты		private var isLoaded:Boolean = false;		/// Счетчик загруженных объектов		private var loadedCount:int = 0;		/// Список предметов комнаты		private var roomItemsList:Vector.<RoomItem>;		/// Максимальное значение процента одного предмета комнаты		private var partPercent:Number;						/**		 * Конструктор		 * @param	config		 */				public function Room( data:RoomData ) {			roomData = data;			personageData = Helper.getProfile().getPersonageDataByPID( roomData.pid );						roomShadow = getChildByName( "roomShadow_mc" ) as Sprite;			floorContainer = getChildByName( "floorContainer_mc" ) as Sprite;			floor = floorContainer.getChildByName( "floor_mc" ) as Sprite;			wall = getChildByName( "wall_mc" ) as MovieClip;			board = getChildByName( "board_mc" ) as MovieClip;			bag = getChildByName( "bag_mc" ) as MovieClip;			personagePlace = getChildByName( "personagePlace_mc" ) as MovieClip;			cord = getChildByName( "cord_mc" ) as MovieClip;			personagePlaceBounds = personagePlace.getBounds( this );						var perspectiveProection:PerspectiveProjection = new PerspectiveProjection();			perspectiveProection.projectionCenter = new Point( floor.width / 2, 0 );			floorContainer.transform.perspectiveProjection = perspectiveProection;			floor.rotationX = FLOOR_ROTATION_X;						roomShadow.mouseChildren = false;			roomShadow.mouseEnabled = false;			roomShadow.visible = false;			roomShadow.alpha = 0;						ButtonManager.addButton( bag );						fillBoard();			addItems();			addPersonage();						addEventListener( Event.ADDED_TO_STAGE, init );						hide();		}				/**		 * Показывает комнату		 */				public function show():void {			trace( roomData.pid, "show" );			visible = true;			if ( !isLoaded ) loadRoomItems();			addPersonage();		}				/**		 * Прячет комнату		 */				public function hide():void {			trace( roomData.pid, "hide" );			visible = false;		}				/**		 * Останавливает загрузку предметов норы		 */				public function stopRoomItemsLoading():void {			if ( isLoaded ) return;			trace( "stopRoomItemsLoading in room", roomData.pid );			for ( var i:int = 0; i < roomItemsList.length; i++ ) {				var item:RoomItem = roomItemsList[ i ];				var itemLoader:ContentLoader = item.getLoader();				trace( i, "loaded =", itemLoader.isLoaded() );				if ( !itemLoader.isLoaded() ) {					itemLoader.close();					itemLoader.removeEventListener( ProgressEvent.PROGRESS, onRoomItemLoadProgress );					item.removeEventListener( ContentLoaderEvent.LOAD_COMPLETE, onRoomItemLoaded );					trace( i, "load stoped" );				}			}		}				/**		 * Выводит персонажа		 */				public function addPersonage():void {			if ( personage ) {				personage.updatePlacement( personagePlaceBounds, this );			} else {				var personagesPool:PersonagesPool = PersonagesPool.getInstance();				personage = personagesPool.getPersonage( personageData, personagePlaceBounds, this );			}		}				override public function get width():Number {			return ScreenController.MAX_WIDTH;		}				override public function get height():Number {			return ScreenController.MAX_HEIGHT;		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Добавляет предметы норы		 */				private function addItems():void {			var itemsList:Vector.<RoomItemData> = roomData.items;			roomItemsList = new Vector.<RoomItem>();						for ( var i:int = 0; i < itemsList.length; i++ ) {				var item:RoomItem = new RoomItem( itemsList[ i ] );				roomItemsList.push( item );			}						partPercent = 100 / roomItemsList.length;		}				/**		 * Начинает загрузку предметов		 */				private function loadRoomItems():void {			for ( var i:int = 0; i < roomItemsList.length; i++ ) {				var item:RoomItem = roomItemsList[ i ];				var itemLoader:ContentLoader = item.getLoader();				if( !itemLoader.isLoaded() ) {					itemLoader.addEventListener( ProgressEvent.PROGRESS, onRoomItemLoadProgress );					item.addEventListener( ContentLoaderEvent.LOAD_COMPLETE, onRoomItemLoaded );					item.startLoad();				}			}					}				/**		 * Обработка поступления данных о обновлении прогресса загрузки одного из предметов норы		 * @param	event		 */				private function onRoomItemLoadProgress( event:ProgressEvent ):void {			var progress:Number = getSummaryProgress();		}				/**		 * Высчитывает общий процент загрузки предметов норы		 * @return		 */				private function getSummaryProgress():Number {			var result:Number = 0;			for ( var i:int = 0; i < roomItemsList.length; i++ ) {				var item:RoomItem = roomItemsList[ i ];				var itemLoader:ContentLoader = item.getLoader();				var itemLoaderInfo:LoaderInfo = itemLoader.getLoaderInfo();				var currentProgress:Number = 0;				if ( itemLoaderInfo.bytesLoaded > 0 ) { 					currentProgress = itemLoaderInfo.bytesLoaded / itemLoaderInfo.bytesTotal;				}				result += partPercent * currentProgress;			}			return result;		}				/**		 * Обработка окончания загрузки предметов норы		 * @param	item		 */				private function onRoomItemLoaded( event:ContentLoaderEvent ):void {			var item:RoomItem = event.target as RoomItem;			var itemLoader:ContentLoader = item.getLoader();			itemLoader.removeEventListener( ProgressEvent.PROGRESS, onRoomItemLoadProgress );			item.removeEventListener( ContentLoaderEvent.LOAD_COMPLETE, onRoomItemLoaded );						loadedCount++;						switch( item.type ) {				case ItemModels.ITEM_CELLAR :					item.buttonMode = true;					item.addEventListener( MouseEvent.CLICK, onCellarClicked );					break;				case ItemModels.ITEM_BOARD :					board.x = 0;					board.y = 0;					item.addChild( board );					item.setBitmapIndex( 0 );					break;				case ItemModels.ITEM_LIGHT :					lamp = item.getMovie();					lamp.y = cord.y + cord.height - 1;					lamp.x = Math.round( cord.x - lamp.width / 2 ) + 1;					lamp.gotoAndStop( light ? lamp.totalFrames : 1 );					break;				case ItemModels.ITEM_SWITCHER : {					switcher = item.getMovie();					switcher.buttonMode = true;					switcher.addEventListener( MouseEvent.CLICK, changeLightMode );					switcher.gotoAndStop( light ? "on" : "off" );					break;				}				case ItemModels.ITEM_FLOOR :					setBitmapFill( floor, Bitmap( itemLoader.getContent() ).bitmapData );					break;				case ItemModels.ITEM_WALLPAPERS :					setBitmapFill( wall, Bitmap( itemLoader.getContent() ).bitmapData );					break;				case ItemModels.ITEM_DOOR :					item.buttonMode = true;					item.addEventListener( MouseEvent.CLICK, onDoorClicked );					break;			}						addItemToDisplay( item );						if ( loadedCount === roomItemsList.length ) {				isLoaded = true;			}		}				/**		 * Добавляет предмет на сцену		 * @param	item		 */				private function addItemToDisplay(item:RoomItem):void {			switch( item.type ) {				case ItemModels.ITEM_FLOOR :				case ItemModels.ITEM_WALLPAPERS :					break;				default :					addChild( item );			}		}				/**		 * Заполняет объект заливкой bitmap		 * @param	target		 * @param	bitmapData		 */				private function setBitmapFill( target:Sprite, bitmapData:BitmapData ):void {			target.graphics.beginBitmapFill( bitmapData );			target.graphics.drawRect( 0, 0, target.width, target.height );			target.graphics.endFill();			target.removeChildren();		}				/**		 * Заполняет доску		 */				private function fillBoard():void {			var message:String = "";			message += personageData.battlesCount + " боёв\n";			message += personageData.wins + " побед\n";			message += personageData.loss + " поражений";			board.label_txt.text = message;		}				/**		 * Включает и выключает свет		 * @param	target		 */				private function changeLightMode( event:MouseEvent = null ):void {			if ( !roomShadow.visible ) {				addChild( roomShadow );				lightMotion.alpha = .65;				lightMotion.onComplete = null;				roomShadow.visible = true;				switcher.gotoAndStop( "on" );			} else {				lightMotion.alpha = 0;				lightMotion.onComplete = function() {					this.visible = false;				};				switcher.gotoAndStop( "off" );			}			if( !lamp.hasEventListener( Event.ENTER_FRAME ) ) {				lamp.addEventListener( Event.ENTER_FRAME, playLampMotion );			}			Tweener.addTween( roomShadow, lightMotion );			light = !light;		}				/**		 * Проигрывает анимацию лампы		 * @param	event		 */				private function playLampMotion( event:Event ):void {			light ? lamp.nextFrame() : lamp.prevFrame();			if( lamp.currentFrame === lamp.totalFrames || lamp.currentFrame === 1 ) {				lamp.removeEventListener( Event.ENTER_FRAME, playLampMotion );			}		}				/**		 * Обработка нажатия крышки погреба		 */				private function onCellarClicked( event:MouseEvent ):void {			dispatchEvent( new RoomEvent( RoomEvent.CELLAR_COVER_CLICKED ) );		}				/**		 * Обработка клика по двери		 */				private function onDoorClicked( event:MouseEvent ):void {			Helper.getDispatcher().dispatchEvent( new NavigationEvent( NavigationEvent.FOREST_CALLED ) );		}			}}