package com.rr.pages.hole {		import com.rr.PersonageData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import com.flashgangsta.managers.ButtonManager;	import com.rr.Profile;	import com.rr.Helper;	import com.rr.personage.PersonagePreview;			public class HolePersonagesLineItem extends MovieClip {				public static const STATE_DEFAULT:String = "default";		public static const STATE_SELECTED:String = "selected";		public static const STATE_CLOSED:String = "closed";		public static const STATE_ADD:String = "add";		public static const WIDHT:int = 57;				private var state:String;		private var _data:PersonageData;		private var heart:Sprite;		private var persCont:MovieClip;		private var motionCont:MovieClip;		private var preview:PersonagePreview;				/**		 * Конструктор		 * @param	state		 * @param	data		 */				public function HolePersonagesLineItem( state:String, data:PersonageData = null ) {			setState( state );			_data = data;			addEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Удаление ссылкок и очищение объекта		 */				public function clear():void {			ButtonManager.removeButton( motionCont );			motionCont = null;			heart = null;			_data = null;			preview = null;			/// TODO: сделать удаление превью персонажа		}				/**		 * Возвращает состояние объекта		 */				public function getState():String {			return state;		}				/**		 * Меняет состояние объекта		 * @param	state		 */				public function setState( state:String ):void {			if( this.state !== state ) {				this.state = state;				gotoAndStop( state );			}		}				/**		 * Возвращает состояние интерактивности объекта		 */				override public function get enabled():Boolean {			return super.enabled;		}				/**		 * Устанавливает состояние интерактивности объекта		 */				override public function set enabled( value:Boolean ):void {			super.enabled = value;			ButtonManager.setButtonEnable( motionCont, value );		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {			var profile:Profile = Helper.getProfile();						removeEventListener( Event.ADDED_TO_STAGE, init );						motionCont = getChildByName( "motion_mc" ) as MovieClip;			heart = getChildByName( "heart_mc" ) as Sprite;			persCont = getChildByName( "avatar_mc" ) as MovieClip;						ButtonManager.addButton( motionCont, null, onClicked );						if ( heart ) {				heart.visible = _data.pid === profile.currentPersonage.pid;				preview = new PersonagePreview( _data, persCont );			}		}				/**		 * Обработка клика по предмету		 * @param	target		 */				private function onClicked( target:MovieClip ):void {			ButtonManager.setButtonState( motionCont, ButtonManager.STATE_NORMAL );			dispatchEvent( new Event( Event.SELECT ) );		}			}	}