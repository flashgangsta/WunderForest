package com.rr.pages.hole {		import caurina.transitions.Tweener;	import com.rr.events.ItemsListLineEvent;	import com.rr.events.NavigationEvent;	import com.rr.events.PopupPageEvent;	import com.rr.events.RoomEvent;	import com.rr.Helper;	import com.rr.ModalRectangle;	import com.rr.PageViewer;	import com.rr.personage.Personage;	import com.rr.Profile;	import com.rr.RoomData;	import com.rr.ScreenController;	import com.rr.ui.ItemsListLine;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import com.rr.Main;	import com.flashgangsta.managers.ButtonManager;	import com.flashgangsta.managers.MappingManager;	import flash.display.DisplayObject;	import flash.display.Shape;	import com.rr.PersonageData;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.geom.Rectangle;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class Hole extends ItemsListLine {				static private const TRANSITION_TYPE:String = "Cubic";				//TODO: разобраться с публичными переменными (так же посмотреть надобность публичных методов), предположительно, нужно создать несколько событий.						/// Кнопки смены режима курсора		private var cursorBtns:MovieClip;		/// Кнопки навигации комнаты		private var buttons:MovieClip;		private var personages:MovieClip;		private var arrowBtn:MovieClip;		private var handBtn:MovieClip;		private var cellarBtn:MovieClip;		private var roomBtn:MovieClip;		private var buyBtn:MovieClip;		private var personagesLine:HolePersonagesLine;		private var dispatcher:EventDispatcher = Helper.getDispatcher();		/// Профиль игрока		private var profile:Profile = Helper.getProfile();		/// Контейнер с комнатами		private var roomsContainer:Sprite = new Sprite();		private var displayedRoom:Room;		private var screenRect:Rectangle;		private var motionParams:Object = { useFrames: true, time: 30, transition: "easeInOut" + TRANSITION_TYPE, onUpdate: onMotionUpdate };		private var modalRectangle:ModalRectangle = new ModalRectangle();				/**		 * Конструктор		 */				public function Hole() {			addChildAt( roomsContainer, 0 );			addRooms();			roomsContainer.addEventListener( MouseEvent.MOUSE_DOWN, startRoomDrag );						addEventListener( Event.ADDED_TO_STAGE, init );			addEventListener( Event.REMOVED_FROM_STAGE, onLeave );			addEventListener( ItemsListLineEvent.GO_TO_NEXT, onArrowClicked );			addEventListener( ItemsListLineEvent.GO_TO_PREV, onArrowClicked );			addEventListener( PopupPageEvent.CLOSED, onCellarClosed );		}				/**		 * 		 * @return		 */				public function getButtonsY():int {			return buttons.y;		}				/**		 * 		 */				override public function get height():Number {			return ScreenController.MAX_HEIGHT;		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event = null ):void {			removeEventListener( Event.ADDED_TO_STAGE, init );			addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );						var favoritePers:PersonageData = profile.currentPersonage;						buttons        = getChildByName( "buttons_mc" )          as MovieClip;			cursorBtns     = getChildByName( "cursors_mc" )          as MovieClip;			arrowBtn       = cursorBtns.getChildByName( "arrow_mc" ) as MovieClip;			handBtn        = cursorBtns.getChildByName( "hand_mc" )  as MovieClip;			cellarBtn      = buttons.getChildByName( "cellar_mc" )   as MovieClip;			roomBtn        = buttons.getChildByName( "room_mc" )     as MovieClip;			buyBtn         = buttons.getChildByName( "buy_mc" )      as MovieClip;			personagesLine = getChildByName( "personagesLine_mc" ) as HolePersonagesLine;						personagesLine.addEventListener( ItemsListLineEvent.GO_TO_SELECTED, onPersonageLineSelected );						dispatcher.addEventListener( Event.RESIZE, resize );						ButtonManager.addButtonGroup( [ arrowBtn, handBtn ], true, arrowBtn, false, ButtonManager.STATE_PRESSED, changeCursorMode );			ButtonManager.addButtonGroup( [ roomBtn, cellarBtn ], true, roomBtn, false, ButtonManager.STATE_PRESSED, changeHoleMode );						ButtonManager.addButton( buyBtn, null, goToPersShop );						resize();						onHoleMode();					}				/**		 * Второе и последующие добавления на сцену норы		 * @param	event		 */				private function onAddedToStage( event:Event ):void {			displayedRoom.addPersonage();		}				/**		 * Добавляет комнаты		 */				private function addRooms():void {			var personagesList:Vector.<PersonageData> = profile.personagesList;						maxStep = personagesList.length - 1;						for ( var i:int = 0; i < personagesList.length; i++ ) {				var personageData:PersonageData = personagesList[ i ];				var roomData:RoomData = profile.getRoomDataByPID( personageData.pid );				var room:Room = new Room( roomData );				room.x = ( room.width ) * i;				roomsContainer.addChild( room );								if ( personageData.pid === profile.currentPersonage.pid ) {					displayedRoom = room;					room.show();					step = i;				}								room.addEventListener( RoomEvent.CELLAR_COVER_CLICKED, onCellarCoverClicked );			}					}				/**		 * Нажатие на одну из двух стрелок переключения между норами		 * @param	event		 */				private function onArrowClicked( event:ItemsListLineEvent ):void {			gotoRoom();			personagesLine.setSelectedPersonage( step );		}				/**		 * 		 * @param	event		 */				private function startRoomDrag( event:MouseEvent ):void {			var dragRect:Rectangle = new Rectangle();			dragRect.y = roomsContainer.y;			dragRect.height = 0;			dragRect.x = ( screenRect.x + screenRect.width - displayedRoom.width ) - displayedRoom.x;			dragRect.width = displayedRoom.width - screenRect.width;						roomsContainer.startDrag( false, dragRect );						stage.addEventListener( MouseEvent.MOUSE_UP, stopRoomDrag );		}				/**		 * 		 * @param	event		 */				private function stopRoomDrag( event:MouseEvent ):void {			roomsContainer.stopDrag();			stage.removeEventListener( MouseEvent.MOUSE_UP, stopRoomDrag );		}				/**		 * Анимация перехода к выбранной комнате		 * @param	event		 */				private function gotoRoom():void {			displayedRoom.stopRoomItemsLoading();			displayedRoom = roomsContainer.getChildAt( step ) as Room;			motionParams.x = screenRect.x - displayedRoom.x + MappingManager.getCentricPoint( screenRect.width, displayedRoom.width );			motionParams.onComplete = resetTransitions;			if ( Tweener.isTweening( roomsContainer ) ) {				motionParams.transition = "easeOut" + TRANSITION_TYPE;				motionParams.onComplete = resetTransitions;			}						Tweener.addTween( roomsContainer, motionParams );		}				/**		 * Сброс аниации после перехода		 */				private function resetTransitions():void {			delete motionParams.onComplete;			motionParams.transition = "easeInOut" + TRANSITION_TYPE;		}				/**		 * Обновление анимации перемещения между комнатами		 */				private function onMotionUpdate():void {			for ( var i:int = 0; i < roomsContainer.numChildren; i++ ) {				var room:Room = roomsContainer.getChildAt( i ) as Room;				var roomParentX:Number = roomsContainer.x - screenRect.x + room.x;								if( roomParentX  + room.width >= screenRect.x && roomParentX <= screenRect.x + screenRect.width && !room.visible ) {					room.show();				}								if ( roomParentX < -room.width && room.visible ) {					room.hide();				} else if ( roomParentX > screenRect.width && room.visible ) {					room.hide();				}							}		}				/**		 * Обработка выбора персонажа в полоске выбора		 * @param	event		 */				private function onPersonageLineSelected( event:ItemsListLineEvent ):void {			step = event.selectedIndex;			gotoRoom();		}				/**		 * Смена режима курсора		 * @param	target		 */				private function changeCursorMode( target:MovieClip ):void {					}				/**		 * Переход к магазину персонажей		 * @param	target		 */				private function goToPersShop( target:MovieClip ):void {			dispatcher.dispatchEvent( new NavigationEvent( NavigationEvent.PERS_SHOP_CALLED ) );		}				/**		 * Обработка выхода из норы		 * @param	event		 */				private function onLeave( event:Event ):void {			trace( "Hole.onLeave()" );		}				/**		 * Позиционирование при смене экрана		 */				private function resize( event:Event = null ):void {			if ( event && !parent ) return;			screenRect = Helper.getScreenController().getScreenRect();			var btnsRigthMargin:int;			var btnsLeftMargin:int;			cursorBtns.x = screenRect.x + Main.MARGIN;			buttons.y = cursorBtns.y = screenRect.y + screenRect.height - 157;			btnsRigthMargin = screenRect.x + screenRect.width - handBtn.width - Main.MARGIN;			btnsLeftMargin = cursorBtns.x + cursorBtns.width;			buttons.x = btnsLeftMargin + MappingManager.getCentricPoint( btnsRigthMargin - btnsLeftMargin, buttons.width );						nextBtn.y = prevBtn.y = screenRect.y + MappingManager.getCentricPoint( screenRect.height, nextBtn.height );			prevBtn.x = screenRect.x + prevBtn.width;			nextBtn.x = screenRect.x + screenRect.width - nextBtn.width;						roomsContainer.x = screenRect.x - displayedRoom.x + MappingManager.getCentricPoint( screenRect.width, displayedRoom.width );			roomsContainer.y = screenRect.y + MappingManager.getCentricPoint( screenRect.height, displayedRoom.height );					}				/**		 * Возвращение в комнату		 */				private function onHoleMode():void {			dispatcher.dispatchEvent( new NavigationEvent( NavigationEvent.HOLE_CALLED ) );			ButtonManager.setSelectionOnGroup( roomBtn );		}				/**		 * Переход к складу или к норе		 * @param	target		 */				private function changeHoleMode( target:MovieClip = null ):void {			if ( target === cellarBtn ) {				gotoCellar();			} else {				onHoleMode();			}		}				/**		 * Осуществляет переход в погреб		 * @param	buttonSelectionNeed нужно ли устанавливать выделене кнопки погреба		 */				private function gotoCellar( buttonSelectionNeed:Boolean = false ):void {			addChild( modalRectangle );			dispatcher.dispatchEvent( new NavigationEvent( NavigationEvent.CELLAR_CALLED ) );			setChildIndex( buttons, this.numChildren - 1 );			if ( buttonSelectionNeed ) {				ButtonManager.setSelectionOnGroup( cellarBtn );			}		}				/**		 * Нажатие крышки погреба в комнате		 * @param	event		 */				private function onCellarCoverClicked( event:RoomEvent ):void {			gotoCellar( true );		}				/**		 * Срабатывает при закрытии окна склада		 * @param	event		 */				private function onCellarClosed( event:PopupPageEvent ):void {			trace( "Hole.onCellarClosed" );			displayedRoom.addPersonage();						removeChild( modalRectangle );						if ( ButtonManager.getSelectedButtonOfGroup( roomBtn ) !== roomBtn ) {				onHoleMode();			}		}			}	}