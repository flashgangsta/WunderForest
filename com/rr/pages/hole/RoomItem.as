package com.rr.pages.hole {	import com.rr.events.ContentLoaderEvent;	import com.rr.Helper;	import com.rr.ItemModelData;	import com.rr.RoomItemData;	import com.rr.utils.BitmapLoader;	import com.rr.utils.ContentLoader;	import com.rr.utils.MovieLoader;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */		public dynamic class RoomItem extends MovieClip {				/// Данные предмета		private var data:RoomItemData;		/// Загрузчик		private var loader:ContentLoader;		/// Модель предмета		private var model:ItemModelData;		/// Индекс предмета в дисплей-листе		private var bitmapIndex:int;		/// Флаг отображает нужно ли менять индекс предмета в дисплейлисте после загрузки		private var setBitmapIndexNeeded:Boolean;		/// Загруженный объект		private var content:DisplayObject;						/**		 * Конструктор		 * @param	data данные предмета		 */				public function RoomItem( data:RoomItemData ) {			this.data = data;			model = Helper.getItemModels().getModelByID( data.id ) as ItemModelData;						if ( model.path.substr( model.path.lastIndexOf( "." ) ) === ".swf" ) {				loader = new MovieLoader( model.path, this, null, false );			} else {				loader = new BitmapLoader( model.path, this, null, null, false );			}						loader.addEventListener( Event.COMPLETE, onLoaded );			x = data.x;			y = data.y;		}				/**		 * Возвращает тип предмета		 */				public function get type():int {			return model.type;		}				/**		 * Устанавливает индекс предмета в дисплей-листе		 * @param	index		 */				public function setBitmapIndex( index:int ):void {			bitmapIndex = index;			setBitmapIndexNeeded = true;			if ( loader.isLoaded() ) {				addChildAt( content, bitmapIndex );			}		}				/**		 * Возвращает ссылку на загруженный объект если он MovieClip		 * @return		 */				public function getMovie():MovieClip {			return loader is MovieLoader ? MovieLoader( loader ).getMovie() : null;		}				/**		 * Запускает загрузку предмета		 */				public function startLoad():void {			loader.load();		}				/**		 * Возвращает ссылку на загрузчик		 * @return		 */				public function getLoader():ContentLoader {			return loader;		}				/**		 * Обработка окончания загрузки		 * @param	event		 */				private function onLoaded( event:Event ):void {			content = loader is BitmapLoader ? BitmapLoader( loader ).getBitmap() : MovieLoader( loader ).getMovie();			loader.removeEventListener( Event.COMPLETE, onLoaded );			if ( setBitmapIndexNeeded ) {				addChildAt( content, bitmapIndex );			}			dispatchEvent( new ContentLoaderEvent( ContentLoaderEvent.LOAD_COMPLETE ) );		}			}}