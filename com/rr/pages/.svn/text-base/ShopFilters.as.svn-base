package com.rr.pages {
	
	import com.rr.events.ShopFilterEvent;
	import com.rr.Items;
	import flash.display.MovieClip;
	import flash.events.Event;
	import com.flashgangsta.managers.ButtonManager;
	
	
	public class ShopFilters extends MovieClip {
		
		private var fayFilters:Array = [];
		private var boarsFilters:Array = [];
		
		private var subfilter:MovieClip;
		private var shop:Shop;
		private var currentFilterDatas:Array = [];
		
		private var currentSubFilterData:Array;
		private var filterEvent:ShopFilterEvent = new ShopFilterEvent( ShopFilterEvent.FILTER_CHANGED );
		
		internal var currentFilter:MovieClip;
		internal var currentSubFilter:MovieClip;
		internal var currentSubFiltersBtns:Array = [];
		internal var currentFilterBtns:Array = [];
		
		public function ShopFilters() {
			addEventListener( Event.ADDED_TO_STAGE, init );
			
			shop = Shop( parent );
		}
		
		private function init( event:Event ):void {
			removeEventListener( Event.ADDED_TO_STAGE, init );
			
			fayFilters[ 0 ] = {
				filter: "fay_hole",
				subfilters: [
					{ lbl: "all", types: "" },
					{ lbl: "moneybox", types: Items.ITEM_MONEYBOX },
					{ lbl: "door", types: Items.ITEM_DOOR },
					{ lbl: "cellar", types: Items.ITEM_CELLAR },
					{ lbl: "board", types: Items.ITEM_BOARD },
					{ lbl: "lights", types: Items.ITEM_LIGHT },
					{ lbl: "windows", types: Items.ITEM_WINDOW },
					{ lbl: "floor", types: Items.ITEM_FLOOR },
					{ lbl: "pretinness", types: Items.ITEM_PRETINNESS }
				] 
			};
			
			fayFilters[ 1 ] = {
				filter: "fay_pers",
				subfilters: [ 
					{ lbl: "all", types: "" },
					{ lbl: "ear", types: Items.ITEM_FAY_EAR },
					{ lbl: "hands", types: Items.ITEM_FAY_HAND },
					{ lbl: "foots", types: Items.ITEM_FAY_FOOT },
					{ lbl: "glasses", types: Items.ITEM_FAY_GLASSES },
					{ lbl: "bows", types: Items.ITEM_FAY_BOW },
					{ lbl: "ties", types: Items.ITEM_FAY_TIES }
				]
			}
			
			fayFilters[ 2 ] = {
				filter: "fay_upgraders",
				subfilters: [
					{ lbl: "all", types: Items.ITEM_FAY_UPGRADES }
				]
			};
			
			boarsFilters[ 0 ] = {
				filter: "boars_battle",
				subfilters: [
					{ lbl: "all", types: "" },
					{ lbl: "helmets", types: Items.ITEM_HELMETS },
					{ lbl: "healths", types: Items.ITEM_HEALTH + "," + Items.ITEM_CARDIO  },
					{ lbl: "bomb", types: Items.ITEM_BOMB },
					{ lbl: "poisons", types: Items.ITEM_POISON },
					{ lbl: "antidots", types: Items.ITEM_ANTIDOTE },
					{ lbl: "alco", types: Items.ITEM_ALCO },
					{ lbl: "eat", types: Items.ITEM_EAT },
					{ lbl: "bribe", types: Items.ITEM_BRIBE },
					{ lbl: "policy", types: Items.ITEM_POLICY }
				]
			};
			
			boarsFilters[ 1 ] = { 
				filter: "boars_pers",
				subfilters: [
					{ lbl: "all", types: "" },
					{ lbl: "ear", types: Items.ITEM_BOARS_EAR },
					{ lbl: "hands", types: Items.ITEM_BOARS_HAND },
					{ lbl: "foots", types: Items.ITEM_BOARS_FOOT },
					{ lbl: "glasses", types: Items.ITEM_BOARS_GLASSES },
					{ lbl: "bows", types: Items.ITEM_BOARS_BOW },
					{ lbl: "ties", types: Items.ITEM_BOARS_TIES }
				]
			};
			
			boarsFilters[ 2 ] = {
				filter: "boars_hole",
				subfilters : [
					{ lbl: "all", types: "" },
					{ lbl: "tv", types: Items.ITEM_TV },
					{ lbl: "carpets", types: Items.ITEM_CARPET },
					{ lbl: "souvenirs", types: Items.ITEM_SOUVENIRS },
					{ lbl: "exscess", types: Items.ITEM_EXSCESS },
				]
			};
			boarsFilters[ 3 ] = {
				filter: "boars_bags",
				subfilters: [
					{ lbl: "all", types: Items.ITEM_BAG }
				]
			};
			boarsFilters[ 4 ] = {
				filter: "boars_lottery",
				subfilters: [
					{ lbl: "all", types: Items.ITEM_LOTTERY }
				]
			};
			boarsFilters[ 5 ] = {
				filter: "boars_upgraders",
				subfilters: [
					{ lbl: "all", types: Items.ITEM_BOARS_UPGRADES }
				]
			};
			
			for ( var i:int = 0; i < fayFilters.length; i++ ) {
				if ( fayFilters[ i ].subfilters.length > 1 ) {
					for ( var j:int = 1; j < fayFilters[ i ].subfilters.length; j++ ) {
						fayFilters[ i ].subfilters[ 0 ].types += fayFilters[ i ].subfilters[ j ].types + ",";
					}
					var str:String = fayFilters[ i ].subfilters[ 0 ].types;
					fayFilters[ i ].subfilters[ 0 ].types = str.substr( 0, str.length - 1 );
					trace( fayFilters[ i ].subfilters[ 0 ].types );
				}
			}
			trace( "__________" );
			for ( i = 0; i < boarsFilters.length; i++ ) {
				if ( boarsFilters[ i ].subfilters.length > 1 ) {
					for ( j = 1; j < boarsFilters[ i ].subfilters.length; j++ ) {
						boarsFilters[ i ].subfilters[ 0 ].types += boarsFilters[ i ].subfilters[ j ].types + ",";
					}
					str = boarsFilters[ i ].subfilters[ 0 ].types;
					boarsFilters[ i ].subfilters[ 0 ].types = str.substr( 0, str.length - 1 );
					trace( boarsFilters[ i ].subfilters[ 0 ].types );
				}
			}
			
			subfilter = subfilter_mc;
			
			setFilter();
			
		}
		
		private function onFilterClicked( target:MovieClip ):void {
			currentFilter = target;
			filterEvent = new ShopFilterEvent( ShopFilterEvent.FILTER_CHANGED );
			dispatchEvent( filterEvent );
		}
		
		private function onSubFilterClicked( target:MovieClip ):void {
			currentSubFilter = target;
			
			for ( var i:int = 0; i < currentSubFiltersBtns.length; i++ ) {
				if ( currentSubFiltersBtns[ i ] === target ) {
					var types:Array = String( currentSubFilterData[ i ].types ).split( "," );
					filterEvent = new ShopFilterEvent( ShopFilterEvent.SUBFILTER_CHANGED );
					filterEvent.subfilterData = types.length > 1 ? Items.getItemsById( null, types ) : Items.getItemsById( types[ 0 ] );
					break;
				}
			}
			
			dispatchEvent( filterEvent );
		}
		
		private function clearFilter():void {
			if ( currentFilterBtns.length ) {
				ButtonManager.resetSelectionOnGroup( currentFilterBtns[ 0 ] );
				ButtonManager.removeButtonGroup( currentFilterBtns[ 0 ] );
				
			}
			currentFilter = null;
			currentFilterBtns = [];
			
			clearSubfilter();
			
		}
		
		private function clearSubfilter():void {
			if( currentSubFiltersBtns.length ) {
				ButtonManager.resetSelectionOnGroup( currentSubFiltersBtns[ 0 ] );
				ButtonManager.removeButtonGroup( currentSubFiltersBtns[ 0 ] );
			}
			
			currentSubFilter = null;
			currentSubFiltersBtns = [];
			
		}
		
		private function getSubFilters():Array {
			var key:String = currentFilter.name;
			var subfilters:Array;
			
			for ( var i:int = 0; i < currentFilterDatas.length; i++ ) {
				if ( currentFilterDatas[ i ].filter === key ) {
					subfilters = currentFilterDatas[ i ].subfilters;
					break;
				}
			}
			return subfilters;
		}
		
		//Проверяет, есть ли айтемы в разделе
		
		private function checkFilling( types:Array ):Boolean {
			var result:Boolean = false;
			
			for ( var i:int = 0; i < types.length; i++ ) {
				if ( Items.filling[ types[ i ] ] ) {
					result = true;
					break;
				}
			}
			
			return result;
			
		}
		
		/**
		 * public methods
		 */
		
		public function setFilter():void {
	
			clearFilter();
			
			currentFilterDatas = shop.currentTab === Shop.TAB_FAY ? fayFilters : boarsFilters;
			
			gotoAndStop( shop.currentTab );
			
			for ( var i:int = 0; i < currentFilterDatas.length; i++ ) {
				currentFilterBtns.push( this[ currentFilterDatas[ i ].filter ] );
				
				var types:Array = String( currentFilterDatas[ i ].subfilters[ 0 ].types ).split( "," );
				if ( !checkFilling( types ) ) {
					ButtonManager.setButtonEnable( currentFilterBtns[ currentFilterBtns.length - 1 ], false, true, .4 );
				}
			}
			
			ButtonManager.addButtonGroup( currentFilterBtns, true, currentFilter = currentFilterBtns[ 0 ], false, ButtonManager.STATE_PRESSED, onFilterClicked );
			
			onFilterClicked( currentFilter );
			
		}
		
		public function changeSubFilter( subfilterID:String ):void {
			subfilter.gotoAndStop( subfilterID );
			
			clearSubfilter();
			
			currentSubFilterData = getSubFilters();
			
			for ( var i:int = 0; i < currentSubFilterData.length; i++ ) {
				currentSubFiltersBtns.push( subfilter[ currentFilter.name + "_" + currentSubFilterData[ i ].lbl ] );
				
				var types:Array = String( currentSubFilterData[ i ].types ).split( "," );
				if ( !checkFilling( types ) ) {
					ButtonManager.setButtonEnable( currentSubFiltersBtns[ currentSubFiltersBtns.length - 1 ], false, true, .4 );
				}
			}
			
			ButtonManager.addButtonGroup( currentSubFiltersBtns, true, currentSubFilter = currentSubFiltersBtns[ 0 ], false, ButtonManager.STATE_PRESSED, onSubFilterClicked );
			ButtonManager.callReleaseHandler( currentSubFilter );
		}
		
	}
	
}
