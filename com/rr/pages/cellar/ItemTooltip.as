package com.rr.pages.cellar {	import com.flashgangsta.managers.ButtonManager;	import com.flashgangsta.managers.MappingManager;	import com.rr.events.ConfirmationEvent;	import com.rr.Helper;	import com.rr.ItemData;	import com.rr.popups.ChangeItemConfirmation;	import com.rr.popups.ConfirmationPopup;	import com.rr.popups.ItemActionConfirmation;	import com.rr.popups.ItemSelectionPopup;	import com.rr.Profile;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */		public class ItemTooltip extends Sprite {				private var profile:Profile = Helper.getProfile();		private var background:Sprite;		private var arrowTop:Sprite;		private var arrowBottom:Sprite;		private var placeLabel:TextField;		private var placeBackground:Sprite;		private var label:TextField;		private var paramLabel:TextField;		private var specialParamsLabel:TextField;		private var removeToCellarBtn:MovieClip;		private var otherItemBtn:MovieClip;		private var giveBtn:MovieClip;		private var throwOutBtn:MovieClip;		private var doNothingBtn:MovieClip;		private var horisontalMargin:int;		private var button:EquipmentItem;		private var otherItemsList:Vector.<ItemData>;				/**		 * Конструктор		 */				public function ItemTooltip() {			background         = getChildByName( "background_mc" )             as Sprite;			arrowTop           = background.getChildByName( "arrowTop_mc" )    as Sprite;			arrowBottom        = background.getChildByName( "arrowBottom_mc" ) as Sprite;			placeBackground    = getChildByName( "placeBackground_mc" )        as Sprite;			placeLabel         = getChildByName( "placeLabel_txt" )         as TextField;			label              = getChildByName( "label_txt" )              as TextField;			paramLabel         = getChildByName( "paramLabel_txt" )         as TextField;			specialParamsLabel = getChildByName( "specialParamsLabel_txt" ) as TextField;			removeToCellarBtn  = getChildByName( "removeToCellarBtn_mc" ) as MovieClip;			otherItemBtn       = getChildByName( "otherItemBtn_mc" )      as MovieClip;			giveBtn            = getChildByName( "giveBtn_mc" )           as MovieClip;			throwOutBtn        = getChildByName( "throwOutBtn_mc" )       as MovieClip;			doNothingBtn       = getChildByName( "doNothingBtn_mc" )      as MovieClip;						horisontalMargin = arrowTop.x + arrowTop.width / 2;						ButtonManager.addButton( removeToCellarBtn, null, onRemoveToCellarClicked );			ButtonManager.addButton( otherItemBtn, null, onOtherItemClicked );			ButtonManager.addButton( giveBtn, null, onGiveBtnClicked );			ButtonManager.addButton( throwOutBtn, null, onThrowOutBtnClicked );			ButtonManager.addButton( doNothingBtn, null, onDoNothingBtnClicked );						visible = false;		}				/**		 * Показывает туллтип		 * @param	placeMessage название местоположения предмета		 * @param	showBottomArrow флаг указывает нижняя ли стрелка должна отображаться		 */				public function show( button:EquipmentItem, showBottomArrow:Boolean = false ):void {			this.button = button;						otherItemsList = profile.getFreeItemsListByPlaceOfUsing( button.placeOfUsing );						ButtonManager.setButtonEnable( otherItemBtn, Boolean( otherItemsList ), true );						placeLabel.text = button.tooltipMessage;			placeLabel.autoSize = TextFieldAutoSize.LEFT;			placeBackground.width = Math.round( placeLabel.width + ( ( placeLabel.x - placeBackground.x ) * 2 ) );						label.text = button.getItemData().name;			label.autoSize = TextFieldAutoSize.LEFT;						var topPoint:int = Math.ceil( placeBackground.x + placeBackground.height );			var bottomPoint:int = paramLabel.y;			label.y = Math.round( topPoint + MappingManager.getCentricPoint( bottomPoint - topPoint, label.height ) );						visible = true;						arrowBottom.visible = showBottomArrow;			arrowTop.visible = !arrowBottom.visible;						stage.addEventListener( MouseEvent.MOUSE_DOWN, onMouseDown );					}				/**		 * Прячет туллтип		 */				public function hide():void {			visible = false;			if ( stage.hasEventListener( MouseEvent.MOUSE_DOWN ) ) {				stage.removeEventListener( MouseEvent.MOUSE_DOWN, onMouseDown );			}		}				public function getButton():EquipmentItem {			return button;		}				/**		 * Обработка нажатия мыши		 * @param	event		 */				private function onMouseDown( event:Event ):void {			if ( !hitTestPoint( stage.mouseX, stage.mouseY, true ) ) {				hide();			}		}				/**		 * Нажатие кнопки "Убрать на склад"		 */				private function onRemoveToCellarClicked( target:MovieClip ):void {			var confirmation:ItemActionConfirmation = new ItemActionConfirmation( "Братишка, точно будем убирать на склад эту хуйню?", button.getItemData().previewPath );			confirmation.addEventListener( ConfirmationEvent.AGREE, onRemoveToCellarAgreed );			confirmation.addEventListener( ConfirmationEvent.CANCEL, removeToCellarConfirmationListeners );			hide();		}				/**		 * Подтверждение снятия предмета и перемещения его в склад		 * @param	event		 */				private function onRemoveToCellarAgreed( event:ConfirmationEvent ):void {			removeToCellarConfirmationListeners( event );			//TODO: прицепить сервер			button.clear();		}				/**		 * Удаляет слушатели окна подтверждения снятия предмета и перемещения его в склад		 * @param	event		 */				private function removeToCellarConfirmationListeners( event:ConfirmationEvent ):void {			var confirmation:ItemActionConfirmation = event.currentTarget as ItemActionConfirmation;			confirmation.removeEventListener( ConfirmationEvent.AGREE, onRemoveToCellarAgreed );			confirmation.removeEventListener( ConfirmationEvent.CANCEL, removeToCellarConfirmationListeners );		}				/**		 * Нажатие кнопки "Другая вещь"		 */				private function onOtherItemClicked( target:MovieClip ):void {			var itemSelectionPopup:ItemSelectionPopup = new ItemSelectionPopup( button.tooltipMessage, otherItemsList );			itemSelectionPopup.addEventListener( ConfirmationEvent.AGREE, onItemSelected );			itemSelectionPopup.addEventListener( ConfirmationEvent.CANCEL, removeItemSelectionListeners );			hide();		}				/**		 * Обработка выбора предмета для смены		 * @param	event		 */				private function onItemSelected( event:ConfirmationEvent ):void {			var itemSelectionPopup:ItemSelectionPopup = event.currentTarget as ItemSelectionPopup;			removeItemSelectionListeners( event );						var confirmation:ChangeItemConfirmation = new ChangeItemConfirmation( "Меняем?", button.getItemData().previewPath, itemSelectionPopup.getSelectedItem() );			confirmation.addEventListener( ConfirmationEvent.AGREE, onChangeAgreed );			confirmation.addEventListener( ConfirmationEvent.CANCEL, removeCanceledListeners );		}				/**		 * Согласие на смену		 * @param	event		 */				private function onChangeAgreed( event:ConfirmationEvent ):void {			removeCanceledListeners( event );			var confirmation:ChangeItemConfirmation = event.currentTarget as ChangeItemConfirmation;			//TODO: припилить сервант			button.fill( confirmation.getNewItemData() );		}				/**		 * Удаление слушателей окна подтверждения смены предмета		 * @param	event		 */				private function removeCanceledListeners( event:ConfirmationEvent ):void {			var confirmation:ChangeItemConfirmation = event.currentTarget as ChangeItemConfirmation;			confirmation.removeEventListener( ConfirmationEvent.AGREE, onChangeAgreed );			confirmation.removeEventListener( ConfirmationEvent.CANCEL, removeCanceledListeners );		}				/**		 * Удаляет слушатели окна выбора предмета для смены		 * @param	event		 */				private function removeItemSelectionListeners( event:ConfirmationEvent ):void {			var itemSelectionPopup:ItemSelectionPopup = event.currentTarget as ItemSelectionPopup;			itemSelectionPopup.removeEventListener( ConfirmationEvent.AGREE, onItemSelected );			itemSelectionPopup.removeEventListener( ConfirmationEvent.CANCEL, removeItemSelectionListeners );		}				/**		 * Нажатие кнопки "Подарить"		 */				private function onGiveBtnClicked( target:MovieClip ):void {			///TODO: сделать дарение предмета когда появится графика			hide();		}				/**		 * Нажатие кнопки "Выкинуть"		 */				private function onThrowOutBtnClicked( target:MovieClip ):void {			var confirmation:ItemActionConfirmation = new ItemActionConfirmation( "Братишка, ты стопудняк решил выбросить этот предмет? Восстановить его будет невозможно!", button.getItemData().previewPath );			confirmation.addEventListener( ConfirmationEvent.AGREE, onThrowOutAgreed );			confirmation.addEventListener( ConfirmationEvent.CANCEL, removeThrowOutConfirmationListeners );			hide();		}				/**		 * 		 * @param	event		 */				private function onThrowOutAgreed( event:ConfirmationEvent ):void {			removeThrowOutConfirmationListeners( event );			//TODO: прицепить сервер			button.clear();		}				/**		 * 		 * @param	event		 */				private function removeThrowOutConfirmationListeners( event:ConfirmationEvent ):void {			var confirmation:ItemActionConfirmation = event.currentTarget as ItemActionConfirmation;			confirmation.removeEventListener( ConfirmationEvent.AGREE, onThrowOutAgreed );			confirmation.removeEventListener( ConfirmationEvent.CANCEL, removeThrowOutConfirmationListeners );		}				/**		 * Нажатие кнопки "Ничего не делать"		 */				private function onDoNothingBtnClicked( target:MovieClip ):void {			hide();		}				/**		 * Добпаляет к x значению нужный отступ		 */				override public function set x( value:Number ):void {			super.x = int( value - horisontalMargin );		}				/**		 * Добпаляет к y значению нужный отступ		 */				override public function set y( value:Number ):void {			super.y = value - ( arrowTop.visible ? arrowTop.y : ( arrowBottom.y + arrowBottom.height ) );		}			}}