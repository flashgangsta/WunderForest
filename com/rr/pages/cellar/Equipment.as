package com.rr.pages.cellar {	import com.flashgangsta.managers.ButtonManager;	import com.flashgangsta.managers.MappingManager;	import com.rr.events.ConfirmationEvent;	import com.rr.events.NavigationEvent;	import com.rr.Helper;	import com.rr.ItemData;	import com.rr.ItemModelData;	import com.rr.Main;	import com.rr.PersonageData;	import com.rr.popups.ItemSelectionPopup;	import com.rr.Profile;	import fl.text.TLFTextField;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.DataEvent;	import flash.events.Event;	import flash.utils.Dictionary;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class Equipment extends MovieClip {				static private const TOOLTIP_MARGIN:int = 1;				private var personagePlace:MovieClip;		private var toShopBtn:MovieClip;		private var toItemsBtn:MovieClip;		private var message:TLFTextField;		private var helmet:EquipmentItem;		private var glasses:EquipmentItem;		private var body:EquipmentItem;		private var accessory:EquipmentItem;		private var jawellery:EquipmentItem;		private var handRight:EquipmentItem;		private var handLeft:EquipmentItem;		private var footRight:EquipmentItem;		private var footLeft:EquipmentItem;		private var placementTooltip:PlacementTooltip;		/// Данные о выбранном персонаже		private var selectedPersonage:PersonageData;		/// Список iid одетых на персонажа предметов		private var equipmentList:Array;		private var profile:Profile;		private var buttonsByIndex:Vector.<EquipmentItem> = new Vector.<EquipmentItem>();		private var itemTooltip:ItemTooltip;		private var selectedButton:EquipmentItem;				/**		 * Конструктор		 */				public function Equipment() {			visible = false;			//addEventListener( Event.ADDED_TO_STAGE, init );			init();		}				/**		 * Инициализация		 * @param	event		 */				private function init():void {			//removeEventListener( Event.ADDED_TO_STAGE, init );						personagePlace = getChildByName( "personagePlace_mc" ) as MovieClip;			toShopBtn = getChildByName( "toShop_mc" ) as MovieClip;			toItemsBtn = getChildByName( "toItems_mc" ) as MovieClip;			helmet = getChildByName( "helmet_mc" ) as EquipmentItem;			glasses = getChildByName( "glasses_mc" ) as EquipmentItem;			body = getChildByName( "body_mc" ) as EquipmentItem;			accessory = getChildByName( "accessory_mc" ) as EquipmentItem;			jawellery = getChildByName( "jawellery_mc" ) as EquipmentItem;			handRight = getChildByName( "handRight_mc" ) as EquipmentItem;			handLeft = getChildByName( "handLeft_mc" ) as EquipmentItem;			footRight = getChildByName( "footRight_mc" ) as EquipmentItem;			footLeft = getChildByName( "footLeft_mc" ) as EquipmentItem;			placementTooltip = getChildByName( "placementTooltip_mc" ) as PlacementTooltip;			profile = Helper.getProfile();			selectedPersonage = profile.currentPersonage;			itemTooltip = getChildByName( "itemTooltip_mc" ) as  ItemTooltip;						buttonsByIndex.push( helmet, glasses, accessory, body, jawellery, handRight, handLeft, footRight, footLeft );						ButtonManager.addButton( toShopBtn, null, gotoShop );			ButtonManager.addButton( toItemsBtn, null, gotoItems );						ButtonManager.addButton( helmet, 		helmet.hit_mc,		onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( glasses, 		glasses.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( body, 			body.hit_mc, 		onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( accessory, 	accessory.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( jawellery, 	jawellery.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( handRight, 	handRight.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( handLeft, 		handLeft.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( footRight, 	footRight.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );			ButtonManager.addButton( footLeft, 		footLeft.hit_mc, 	onItemClicked, hideToolTip, null, showToolTip, hideToolTip );						helmet.tooltipMessage = "На голову";			glasses.tooltipMessage = "На глаза";			body.tooltipMessage = "На тело";			accessory.tooltipMessage = "Аксессуар";			jawellery.tooltipMessage = "Украшение";			handRight.tooltipMessage = "На правую руку";			handLeft.tooltipMessage = "На левую руку";			footRight.tooltipMessage = "На правую ногу";			footLeft.tooltipMessage = "На левую ногу";						helmet.placeOfUsing = ItemModelData.PLACE_HEAD;			glasses.placeOfUsing = ItemModelData.PLACE_GLASSES;			body.placeOfUsing = ItemModelData.PLACE_BODY;			accessory.placeOfUsing = ItemModelData.PLACE_ACCESSORY;			jawellery.placeOfUsing = ItemModelData.PLACE_JAWELLERY;			handRight.placeOfUsing = ItemModelData.PLACE_HAND;			handLeft.placeOfUsing = ItemModelData.PLACE_HAND;			footLeft.placeOfUsing = ItemModelData.PLACE_FOOT;			footRight.placeOfUsing = ItemModelData.PLACE_FOOT;		}				/**		 * Переход к экиперовке		 * @param	target		 */				private function gotoItems( target:MovieClip ):void {			//TODO: подвесить событие		}				/**		 * Выводит раздел экипировки		 */				public function show():void {			update();			visible = true;		}				/**		 * Выход из раздела		 */				public function hide():void {			visible = false;		}				/**		 * Устанавливает выбранного персонажа		 */				public function setSelectedPersonage( value:PersonageData ):void {			selectedPersonage = value;		}				/**		 * Обнавляет экипировку персонажа		 */				public function update():void {			equipmentList = selectedPersonage.equipmentList;						for ( var i:int = 0; i < equipmentList.length; i++ ) {				var currentIID:int = equipmentList[ i ];				var currentItem:ItemData = profile.getItemDataByIID( currentIID );								if ( currentIID ) {					buttonsByIndex[ i ].fill( currentItem );				}			}		}				public function getPersonagePlace():Sprite {			return personagePlace;		}				/**		 * Переход к магазину		 * @param	target		 */				private function gotoShop( target:MovieClip ):void {			Helper.getDispatcher().dispatchEvent( new NavigationEvent( NavigationEvent.SHOP_CALLED ) );		}				/**		 * Показывает тултип при наведении на кнопку		 */				private function showToolTip( target:MovieClip ):void {			placementTooltip.show( EquipmentItem( target ).tooltipMessage, target.x > helmet.x ? PlacementTooltip.RIGHT : PlacementTooltip.LEFT );						if ( target.x < helmet.x ) {				/// кнопка находится в левой части				placementTooltip.x = footRight.x + footRight.width + TOOLTIP_MARGIN;			} else if( target.x > helmet.x ) {				/// кнопка находится в правой части				placementTooltip.x = footLeft.x - TOOLTIP_MARGIN - placementTooltip.width;			} else {				/// кнопка находится в центре				placementTooltip.x = helmet.x + helmet.width + TOOLTIP_MARGIN;			}			placementTooltip.y = target.y + MappingManager.getCentricPoint( target.height, placementTooltip.height );		}				/**		 * Прячет тултип при уведении на кнопку		 */				private function hideToolTip( target:MovieClip ):void {			placementTooltip.hide();		}				/**		 * Обработка нажатия на кнопку		 */				private function onItemClicked( target:MovieClip ):void {			var button:EquipmentItem = EquipmentItem( target );			if ( button.isEmpty() ) {				var itemSelectionPopup:ItemSelectionPopup = new ItemSelectionPopup( button.tooltipMessage, profile.getFreeItemsListByPlaceOfUsing( button.placeOfUsing ) );				itemSelectionPopup.addEventListener( ConfirmationEvent.AGREE, onItemSelected );				itemSelectionPopup.addEventListener( ConfirmationEvent.AGREE, removeItemSelectionListeners );				selectedButton = button;			} else {				itemTooltip.show( button, button.y > body.y );				// Присвоение x и y должны происходить после вызова метода show()				itemTooltip.x = int( button.x + button.width / 2 );				itemTooltip.y = int( button.y + button.height / 2 );			}		}				/**		 * 		 * @param	event		 */				private function onItemSelected( event:ConfirmationEvent ):void {			var itemSelectionPopup:ItemSelectionPopup = event.currentTarget as ItemSelectionPopup;			selectedButton.fill( itemSelectionPopup.getSelectedItem() );			removeItemSelectionListeners( event );					}				/**		 * 		 * @param	event		 */				private function removeItemSelectionListeners( event:ConfirmationEvent ):void {			var itemSelectionPopup:ItemSelectionPopup = event.currentTarget as ItemSelectionPopup;			itemSelectionPopup.removeEventListener( ConfirmationEvent.AGREE, onItemSelected );			itemSelectionPopup.removeEventListener( ConfirmationEvent.AGREE, removeItemSelectionListeners );			selectedButton = null;		}			}}