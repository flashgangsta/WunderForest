package com.rr.pages.cellar {		import caurina.transitions.properties.ColorShortcuts;	import caurina.transitions.Tweener;	import com.flashgangsta.managers.ButtonManager;	import com.flashgangsta.managers.MappingManager;	import com.rr.Header;	import com.rr.Helper;	import com.rr.Main;	import com.rr.pages.PopupPage;	import com.rr.personage.Personage;	import com.rr.PersonageData;	import com.rr.PersonagesPool;	import com.rr.ui.PersonagesSelector;	import com.rr.utils.Definitier;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	import fl.text.TLFTextField;	import com.rr.pages.hole.Hole;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class Cellar extends PopupPage {				/// x точка рюкзака в стандартном положении		static public const BAG_DEFAULT_X:int = 105;		/// х точка рюкзака при просмотре предметов в него		static public const BAG_DISPLAYED_X:int = 147;				private var cellarInBag:CellarInBag;				// TODO: перенести кнопку закрытия в суперкласс				private var lengthLabel:TLFTextField;		private var toBagBtn:MovieClip;		private var background:MovieClip;		private var forHoleBtn:MovieClip;		/// Компонент выбора персонажей		private var personagesSelector:PersonagesSelector;				//TODO: Проверить надобность доступа internal переменных				/// Кнопка перехода к предметам экипировки		internal var equipBtn:MovieClip;		/// Кнопка перехода в режим экипировки персонажа		internal var equipmentBtn:MovieClip;		/// Кнопка перехода в режим просмотра предметов в рюкзаке персонажа		internal var inBagBtn:MovieClip;		/// Контейнер персонажа		internal var personageInstance:Sprite;		/// Контейнер склада		internal var cellarContainer:CellarItemsContainer;		/// Персонаж		internal var personage:Personage;		/// Зона расположения персонажа		internal var personagePlace:MovieClip;		/// Иконка рюкзак рядом с персонажем		internal var bag:MovieClip;		/// Раздел экипировки		internal var equipment:Equipment;		internal var currentCellarMode:*;		internal var lastCellarMode:*;				/**		 * Конструктор		 */				public function Cellar() {			init();		}				/**		 * Инициализация		 * @param	event		 */ 				private function init():void {			ColorShortcuts.init();			addEventListener( Event.REMOVED_FROM_STAGE, onLeave );			addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );						lengthLabel = lengthLabel_txt;			equipBtn = equipBtn_mc;			toBagBtn = toBagBtn_mc;			forHoleBtn = forHoleBtn_mc;			personagePlace = personagePlace_mc;			cellarContainer = cellarContainer_mc;			equipBtn = equipBtn_mc;			equipmentBtn = equipmentBtn_mc;			inBagBtn = inBagBtn_mc;			bag = bag_mc;			equipment = equipment_mc;			background = bg_mc;			personagesSelector = personagesSelector_mc;						bag.visible = false;						Helper.getDispatcher().addEventListener( Event.RESIZE, resize );						inBagBtn.y = equipmentBtn.y;			inBagBtn.visible = false;						resize();						ButtonManager.addButton( equipmentBtn, null, changeCellarMode );			ButtonManager.addButton( inBagBtn, null, changeCellarMode );			ButtonManager.addButtonGroup( [ equipBtn, toBagBtn, forHoleBtn ], false, equipBtn, false, ButtonManager.STATE_PRESSED, changeCellarMode );						cellarContainer.fill( Helper.getProfile().equipmentItemsList );						personagesSelector.addEventListener( Event.CHANGE, onPersonageChanged );						addEventListener( PopupPage.ADD_MOTION_COMPLETE, onAddMotionComplete );			addEventListener( Event.REMOVED_FROM_STAGE, onRemovedFromStage );					}				/**		 * 		 * @param	event		 */				private function onAddedToStage( event:Event ):void {			addPersonage();		}				/**		 * 		 * @param	event		 */				private function onRemovedFromStage( event:Event ):void {			destroy();		}				/**		 * Обработка выхода со склада		 * @param	event		 */				private function onLeave( event:Event ):void {			trace( "Cellar.onLeave()" );			if ( personage ) personage.lock();		}				/**		 * Закрывает склад		 * @param	target		 */				private function destroy():void {			changeCellarMode( equipBtn );			ButtonManager.setSelectionOnGroup( equipBtn );		}				/**		 * Окончание появления окна		 */				private function onAddMotionComplete( event:Event ):void {			Definitier.addDefinition( equipBtn, toBagBtn, forHoleBtn, closeBtn, equipmentBtn );		}				/**		 * Добавляет персонажа		 */				private function addPersonage():void {			var personagesPool:PersonagesPool = PersonagesPool.getInstance();			var personageData:PersonageData =  Helper.getProfile().currentPersonage;			personage = personagesPool.getPersonage( personageData, personagePlace.getBounds( this ), this );			personageInstance = personage.getInstance();			addChild( bag );		}				/**		 * Меняет режим склада		 * @param	target		 */				internal function changeCellarMode( target:MovieClip ):void {						if ( currentCellarMode && target !== inBagBtn ) currentCellarMode.destroy();						lastCellarMode = currentCellarMode;						if( equipmentBtn.visible ) equipmentBtn.visible = false;			if ( equipment.visible ) equipment.visible = false;			if ( inBagBtn.visible ) resetBagAfterBagItemsMode();						if ( target === forHoleBtn ) {				cellarContainer.changeMode( CellarItemsContainer.MODE_FOR_HOLE );			} else {				cellarContainer.changeMode( CellarItemsContainer.MODE_DEFAULT );			}						switch ( target ) {				// "Экипировка"				case equipBtn : {					// TODO: Удалить все упоминания о CellarEquip и currentCellarMode					currentCellarMode = null;					equipmentBtn.visible = true;					personage.show();					personagesSelector.show();					cellarContainer.fill( Helper.getProfile().equipmentItemsList );					addPersonage();					break;				}				// "В рюкзак"				case toBagBtn : {					currentCellarMode = null;					cellarContainer.fill( Helper.getProfile().bagItemsList );					moveBagToBagItemsMode();					equipmentBtn.visible = false;					inBagBtn.visible = true;					personage.show();					personagesSelector.hide();					addPersonage();					break;				}				// "Для норки (Всякие штуки)"				case forHoleBtn : {					// TODO: Удалить все упоминания о CellarToHole и currentCellarMode					currentCellarMode = null;					cellarContainer.fill( Helper.getProfile().interiorItemsList );					personage.hide();					equipmentBtn.visible = false;					inBagBtn.visible = false;					personagesSelector.hide();					bag.visible = false;					break;				}				// "Экипировать"				case equipmentBtn : {					currentCellarMode = null;					//personage.hide();					cellarContainer.hide();					bag.visible = false;					personagesSelector.hide();					equipmentBtn.visible = inBagBtn.visible = false;					equipment.show();					personage.updatePlacement( equipment.getPersonagePlace().getBounds( equipment ), equipment );					break;				}				// "Что в рюкзаке"				case inBagBtn : {					if ( !cellarInBag ) cellarInBag = new CellarInBag();					currentCellarMode = cellarInBag;					inBagBtn.visible = true;					break;				}				}						///TODO: удалить впизду эту строку после того как будет удален класс CellarInBag			if( currentCellarMode ) currentCellarMode.build();					}				/**		 * Перемещает персонажа в его положение в разде просмотра предмето для рюкзака		 */				private function moveBagToBagItemsMode():void {			var tweenTime:int = 10;			bag.alpha = 0;			bag.visible = true;			Tweener.addTween( bag, { x: Cellar.BAG_DISPLAYED_X, alpha: 1, useFrames: true, time: tweenTime, transition: "easeInOutCubic" } );		}				/**		 * Сбрасывает в стандартное положение персонажа если он находится в тени и прячет рюкзак		 */				private function resetBagAfterBagItemsMode():void {			var tweenTime:int = 10;			inBagBtn.visible = false;			Tweener.addTween( bag, { x: Cellar.BAG_DEFAULT_X, alpha: 0, useFrames: true, time: tweenTime, transition: "easeInOutCubic", onComplete: function() { this.visible = false } } );		}				/**		 * Позиционирование после смены режима экрана		 */		 		private function resize( event:Event = null ):void {			if ( event && !parent ) return;			var screenRect:Rectangle = Helper.getScreenController().getScreenRect();			var header:Header = Helper.getHeader();			var hole:Hole = Helper.getPageViewer().getCurrentPage() as Hole;			var headerBottomY:int = header.y + header.height;			x = screenRect.x + MappingManager.getCentricPoint( screenRect.width, background.width );			y = Math.round( headerBottomY + MappingManager.getCentricPoint( hole.getButtonsY() - headerBottomY, background.height ) );		}				/**		 * Обработка выбора другого персонажа		 * @param	event		 */				private function onPersonageChanged( event:Event ):void {			equipment.setSelectedPersonage( personagesSelector.getSelectedPersonage() );		}			}	}