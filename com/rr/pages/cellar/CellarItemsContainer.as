package com.rr.pages.cellar {	import caurina.transitions.Tweener;	import com.flashgangsta.managers.ButtonManager;	import com.rr.events.ItemsListLineEvent;	import com.rr.ItemData;	import com.rr.ui.ItemsListLine;	import com.rr.ui.Paging;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class CellarItemsContainer extends ItemsListLine {				public static const MODE_FOR_HOLE:String = "forhole";		public static const MODE_DEFAULT:String = "default";				private static const DISPLAYED_HORISONTAL_LENGTH_DEFAULT:int = 5;		private static const DISPLAYED_HORISONTAL_LENGTH_FOR_HOLE:int = 7;		private static const DISPLAYED_VERTICAL_LENGTH:int = 3;		private static const ITEM_MARGIN:int = 8;		private static const NEXT_BTN_X_DEFAULT:int = 492;		private static const NEXT_BTN_X_HOLE:int = 662;		private static const SHADOW_MARGIN:int = 30;		private static const X_DEFAULT:int = 206;		private static const X_FOR_HOLE:int = 36;		private static const MASK_WIDTH_DEFAULT:int = 428;		private static const MASK_WIDTH_HOLE:int = 598;				/// Текущий режим контейнера		private var currentMode:String = MODE_DEFAULT;		/// Список данных о предметах у пользователя		private var itemDatasList:Vector.<ItemData>;		/// Компонент переключения страниц		private var paging:Paging;		/// Контейнер с предметами		private var container:Sprite;		private var maskObj:MovieClip;		private var rightShadow:MovieClip;		private var items:Array = [];		private var modeMotion:Object = { useFrames: true, time: 13, transition: "easeOutQuint" };		/// Количество возможных отображаемых на экране предметов		private var displayedLength:int = DISPLAYED_HORISONTAL_LENGTH_DEFAULT * DISPLAYED_VERTICAL_LENGTH;		/// Количество горизонтальных отображаемых на экране предметов		private var displayedHorisontalLength:int = DISPLAYED_HORISONTAL_LENGTH_DEFAULT;		/// Выбранный предмет		private var selectedItem:ItemData;		///		private var allItemsList:Array = [];				/**		 * Конструктор		 */				public function CellarItemsContainer() {			paging = getChildByName( "paging_mc" ) as Paging;			container = new Sprite();			addEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, init );						maskObj = mask_mc;			rightShadow = rightShadow_mc;						container.x = maskObj.x;			container.y = maskObj.y;			addChild( container );						paging.addEventListener( Event.CHANGE, onPagingChanged );			addEventListener( ItemsListLineEvent.GO_TO_NEXT, showItems );			addEventListener( ItemsListLineEvent.GO_TO_PREV, showItems );						var maxDisplayedLength:int = DISPLAYED_HORISONTAL_LENGTH_FOR_HOLE * DISPLAYED_VERTICAL_LENGTH;						for ( var i:int = 0; i < maxDisplayedLength; i++ ) {				allItemsList.push( this[ "item" + i + "_mc" ] );			}			ButtonManager.addButtonGroup( allItemsList, true, null, false, ButtonManager.STATE_SELECTED, onItemSelected );		}				/**		 * Заполняет контейнер		 * @param	data		 */				public function fill( list:Vector.<ItemData> ):void  {			itemDatasList = list;						hideItems();			reset();			selectedItem = null;						if ( currentMode === CellarItemsContainer.MODE_DEFAULT ) {				displayedHorisontalLength = DISPLAYED_HORISONTAL_LENGTH_DEFAULT;				displayedLength = DISPLAYED_HORISONTAL_LENGTH_DEFAULT * DISPLAYED_VERTICAL_LENGTH;			} else {				displayedHorisontalLength = DISPLAYED_HORISONTAL_LENGTH_FOR_HOLE;				displayedLength = DISPLAYED_HORISONTAL_LENGTH_FOR_HOLE * DISPLAYED_VERTICAL_LENGTH;			}						maxStep = calculateMaxStep( displayedLength, itemDatasList.length );			paging.setPages( maxStep + 1 );			showItems();		}				/**		 * Меняет режим контейнера		 * @param	to режим на который меняет		 */				public function changeMode( requiresMode:String ):void {			if ( !visible ) show();						if ( currentMode === requiresMode ) return;			currentMode = requiresMode;						if ( requiresMode === CellarItemsContainer.MODE_FOR_HOLE ) {				// Переход в режим для норы				addTween( nextBtn, "x", CellarItemsContainer.NEXT_BTN_X_HOLE );				addTween( this, "x", CellarItemsContainer.X_FOR_HOLE );				addTween( rightShadow, "x", CellarItemsContainer.NEXT_BTN_X_HOLE - CellarItemsContainer.SHADOW_MARGIN );				addTween( maskObj, "width", CellarItemsContainer.MASK_WIDTH_HOLE );			} else {				// Переход в режим для экипировки				addTween( nextBtn, "x", CellarItemsContainer.NEXT_BTN_X_DEFAULT );				addTween( this, "x", CellarItemsContainer.X_DEFAULT );				addTween( rightShadow, "x", CellarItemsContainer.NEXT_BTN_X_DEFAULT - CellarItemsContainer.SHADOW_MARGIN );				addTween( maskObj, "width", CellarItemsContainer.MASK_WIDTH_DEFAULT );			}		}				/**		 * Скрывает контейнер		 */				public function hide():void {			visible = false;		}				/**		 * Показывает контейнер		 */				public function show():void {			visible = true;		}				/**		 * Возврашает выбранный предмет		 */				public function getSelectedItem():ItemData {			return selectedItem;		}				/**		 * Отображает предметы		 * @param	event		 */				private function showItems( event:Event = null ):void {			var maxIterator:int = Math.min( displayedLength, itemDatasList.length );						hideItems();						for ( var i:int = 0; i < maxIterator; i++ ) {				var j:int = Math.floor( i / displayedHorisontalLength ) * DISPLAYED_HORISONTAL_LENGTH_FOR_HOLE + ( i % displayedHorisontalLength );				var item:CellarItem = item = items[ i ] = this[ "item" + j + "_mc" ];				var dataCount:int = ( step * displayedLength ) + i;				if ( dataCount < itemDatasList.length ) {					item.fill( itemDatasList[ dataCount ] );					if ( selectedItem ) {						if ( selectedItem.iid === item.getItemData().iid ) {							ButtonManager.setSelectionOnGroup( item );						}					}				}			}						if ( event ) {				/// Устанавливаем если функция вызвана перелистыванием страницы по стрелкам				paging.setPageSelection( step + 1 );			}		}				/**		 * Удаляет все ссылки		 */				public function destroy():void {			hideItems();			ButtonManager.removeButtonGroup( allItemsList[ 0 ] );			allItemsList = null;			selectedItem = null;		}				/**		 * Удаляет предметы		 */				private function hideItems():void {			if ( items.length ) {				for ( var i:int = 0; i < items.length; i++ ) {					var item:CellarItem = items[ i ];					item.clear();				}				items = [];			}						if( allItemsList.length ) ButtonManager.resetSelectionOnGroup( allItemsList[ 0 ] );		}				/**		 * Добавляет анимацию		 * @param	object объект который будет анимированн		 * @param	property свойство которое будет изменено		 * @param	value значение свойства к которому нужно придти в результате анимации		 */				private function addTween( object:Sprite, property:String, value:Number ):void {			var motionParams:Object = { };			motionParams[ property ] = value;			motionParams.useFrames = modeMotion.useFrames;			motionParams.time = modeMotion.time;			motionParams.transition = modeMotion.transition;			Tweener.addTween( object, motionParams );		}				/**		 * Обработка изменения страницы пейджинга		 * @param	event		 */				private function onPagingChanged( event:Event ):void {			step = paging.getCurrentPage() - 1;			showItems();		}				/**		 * Обработка выбора элемена		 * @param	target		 */				private function onItemSelected( target:MovieClip ):void {			selectedItem = CellarItem( target ).getItemData();			dispatchEvent( new Event( Event.SELECT ) );		}			}	}