package com.rr.pages.personagesShop {		import com.rr.events.NavigationEvent;	import com.rr.PageViewer;	import com.rr.PersonageModelData;	import flash.display.MovieClip;	import flash.events.Event;	import com.flashgangsta.managers.ButtonManager;	import caurina.transitions.Tweener;	import com.rr.Main;	import flash.display.Sprite;	import com.flashgangsta.display.Drawing;	import flash.events.EventDispatcher;	import flash.geom.Rectangle;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.MouseEvent;	import flash.display.DisplayObject;	import com.rr.personage.Personage;	import com.flashgangsta.managers.MappingManager;	import com.rr.Helper;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class PersonagesShop extends Sprite {				private static const BACK_TO_HOLE_BTN_STEP:int = 57;				/// Кнопка предыдущий персонаж		private var prevBtn:MovieClip;		/// Кнопка слежующий персонаж		private var nextBtn:MovieClip;		/// Кнопка назад в норку		private var backToHoleBtn:MovieClip;		/// Доска информации о персонаже		private var board:PersBoard;				private var currentPersPlace:MovieClip;		private var personage:Personage; // Просматриваемый персонаж		private var currentNum:int = 0; // Номер просматриваемого персонажа		private var personages:Array = []; // Массив загруженных персонажей		private var currentPersContainer:Sprite; // Контейнер просматриваемого персонажа		private var persMotion:Object = { useFrames: true, time: 20, transition: "easeInOutCubic" };		private var personagesContainer:Sprite = new Sprite();		private var dispatcher:EventDispatcher = Helper.getDispatcher();				/**		 * Конструктор		 */				public function PersonagesShop() {						prevBtn = getChildByName( "prev_mc" ) as MovieClip;			nextBtn = getChildByName( "next_mc" ) as MovieClip;			backToHoleBtn = getChildByName( "back_mc" ) as MovieClip;			board = getChildByName( "board_mc" ) as PersBoard;			currentPersPlace = getChildByName( "currentPersPlace_mc" ) as MovieClip;						addChild( personagesContainer );			personagesContainer.x = currentPersPlace.x;			personagesContainer.y = currentPersPlace.y;						ButtonManager.addButton( prevBtn, null, goPrev );			ButtonManager.addButton( nextBtn, null, goNext );						personage = getPersonage();						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			addEventListener( Event.REMOVED_FROM_STAGE, onLeave );			dispatcher.addEventListener( Event.RESIZE, resize );		}				/**		 * Инициализация		 * @param	event		 */				private function onAddedToStage( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage );												if( Helper.getProfile().personagesList.length ) {				showBackButton();			} else {				backToHoleBtn.gotoAndStop( 1 );				backToHoleBtn.visible = false;			}						resize();		}				/**		 * Выбор следующего персонажа		 */				private function goPrev( target:MovieClip ):void {			currentNum > 0 ? currentNum-- : currentNum = Helper.getPersonageModels().length - 1; ;			go();		}				/**		 * Выбор предыдущего персонажа		 */				private function goNext( target:MovieClip ):void {			currentNum < Helper.getPersonageModels().length - 1 ? currentNum++ : currentNum = 0;			go();		}				/**		 * Анимация смены персонажа		 */				private function go():void {			personage.hide();			personage = getPersonage();			personage.show();		}				/**		 * Возвращает выбранного персонажа		 * @return		 */				private function getPersonage():Personage {			var pers:Personage;						if ( personages[ currentNum ] ) {				pers = personages[ currentNum ];			} else {				var modelData:PersonageModelData = Helper.getPersonageModels().getModelByIndex( currentNum ) as PersonageModelData;				pers = new Personage( currentPersPlace.getBounds( this ), this );				pers.loadByModel( modelData );				personages[ currentNum ] = pers;			}						board.fillPersParams( pers.getModelData() as PersonageModelData ); //TODO: убрать присвоение типа						return pers;		}						private function setSex():void {					}				/**		 * Обработка нажатия кнопки возвращения в нору		 * @param	target		 */				private function backToHole( target:MovieClip ):void {			dispatcher.dispatchEvent( new NavigationEvent( NavigationEvent.HOLE_CALLED ) );		}				/**		 * Показывает кнопку возвращения в нору		 */				private function showBackButton():void {			backToHoleBtn.visible = true;			backToHoleBtn.y += backToHoleBtn.height;			Tweener.addTween( backToHoleBtn, { y: stage.stageHeight - BACK_TO_HOLE_BTN_STEP, useFrames: true, time: 15, transition: "easeOutCubic" } );			ButtonManager.addButton( backToHoleBtn, null, backToHole );		}				/**		 * Обработка смены экрана		 * @param	event		 */				public function resize( event:Event = null ):void {			if( !stage ) return;			var screenRect:Rectangle = Helper.getScreenController().getScreenRect();			MappingManager.setAlign( this, screenRect );			backToHoleBtn.y = screenRect.y + screenRect.height - BACK_TO_HOLE_BTN_STEP;		}				/**		 * Осущёствлён вход в магазин		 */				public function onEnter():void {			personage.unlock();		}				/**		 * Магазин покинут		 * @param	event		 */				private function onLeave( event:Event ):void {			personage.lock();		}	}	}