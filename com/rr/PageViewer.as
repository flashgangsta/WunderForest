package com.rr {		import com.rr.events.PopupPageEvent;	import com.rr.pages.cellar.Cellar;	import com.rr.pages.PopupPage;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import com.rr.pages.Rating;	import com.rr.pages.forest.Forest;	import com.rr.pages.hole.Hole;	import com.rr.pages.personagesShop.PersonagesShop;	import com.rr.pages.shop.Shop;	import flash.display.Sprite;		/**	 * ...	 * @author Sergey Krivtsov	 */		public class PageViewer extends MovieClip {				public static const PAGE_FOREST:String = "forest";		public static const PAGE_HOLE:String = "hole";		public static const PAGE_SHOP:String = "shop";		public static const PAGE_FAY_SHOP:String = "fayShop";		public static const PAGE_BOARS_SHOP:String = "boarsShop";		public static const PAGE_RATING:String = "rating";		public static const PAGE_PERSONAGES_SHOP:String = "personagesShop";		public static const PAGE_CELLAR:String = "cellar";				//TODO: проверить надобность публичных переменных				public var currentPage:Sprite;		public var forest:Forest;		public var rating:Rating;		public var hole:Hole;		public var personagesShop:PersonagesShop;		public var shop:Shop;		public var cellar:Cellar;				private var body:MovieClip;		private var popupPage:Object;				/**		 * Конструктор		 */				public function PageViewer() {			addEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {      trace("pageViewer init");			removeEventListener( Event.ADDED_TO_STAGE, init );			body = getChildByName( "body_mc" ) as MovieClip;			Helper.getDispatcher().addEventListener( Event.RESIZE, resize );			resize();			setPage( PageViewer.PAGE_FOREST );		}				/**		 * Осуществляет смену страницы		 * @param	page_id тдентификатор страницы		 */				public function setPage( page_id:String ):void {			var oldCurrentPage:Sprite = currentPage;			/// Переменная запоминает какой именно раздел магазина нужно открыть			var shopSection:String;						if ( popupPage ) {        trace("remove old popup page" +  oldCurrentPage.name);				removePopupPage();			}			      trace("new popup page" +  page_id);      			switch( page_id ) {								case PageViewer.PAGE_FOREST : {					if( !forest ) forest = new Forest();					currentPage = forest;					break;				}								case PageViewer.PAGE_RATING : {					if( !rating ) rating = new Rating();					currentPage = rating;					break;				}								case PageViewer.PAGE_HOLE : {					if ( !hole ) hole = new Hole();					currentPage = hole;					break;				}								case PageViewer.PAGE_CELLAR : {					if ( !cellar ) cellar = new Cellar();					popupPage = { };					popupPage.main = hole;					popupPage.second = cellar;					break;				}								case PageViewer.PAGE_PERSONAGES_SHOP : {					if ( !personagesShop ) personagesShop = new PersonagesShop();					else personagesShop.onEnter();					currentPage = personagesShop;					break;				}								case PageViewer.PAGE_BOARS_SHOP : {					shopSection = Shop.TAB_BOAR;				}								case PageViewer.PAGE_FAY_SHOP : {					if ( !shopSection ) shopSection = Shop.TAB_FAY;				}								case PageViewer.PAGE_SHOP : {					if( !shop ) shop = new Shop();					popupPage = {};					popupPage.main = forest;					popupPage.second = shop;					if ( shopSection ) {						shop.setShop( shopSection );						shopSection = null;					}					break;				}			}						if( popupPage ) {				if( popupPage.main !== currentPage ) {					currentPage = popupPage.main;					addPage( currentPage, oldCurrentPage );				}				addPage( popupPage.second );				PopupPage( popupPage.second ).addEventListener( PopupPageEvent.CLOSED, removePopupPage );			} else {				addPage( currentPage, oldCurrentPage )			}		}				/**		 * 		 * @return		 */				public function getCurrentPage():Sprite {			return currentPage;		}				/**		 * Отображает страницу		 * @param	page		 * @param	oldPage		 */				private function addPage( page:Sprite, oldPage:Sprite = null ):void {			if( oldPage && oldPage !== page ) removeChild( oldPage );			if ( page !== oldPage ) {        trace("addPage");        addChild( page );      }		}				/**		 * 		 * @param	event		 */				private function removePopupPage( event:PopupPageEvent = null ):void {			var popup:PopupPage = PopupPage( popupPage.second );			var main:DisplayObject = popupPage.main;			popup.removeEventListener( PopupPageEvent.CLOSED, removePopupPage );			removeChild( popupPage.second );			popupPage = null;			main.dispatchEvent( new PopupPageEvent( PopupPageEvent.CLOSED ) );		}				/**		 * Обновляет размеры контейнера		 */				private function resize( event:Event = null ):void {			body.width = stage.stageWidth;			body.height = stage.stageHeight;		}			}	}