package com.rr {		import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Sprite;	import com.flashgangsta.managers.ButtonManager;	import caurina.transitions.Tweener;	import com.rr.utils.BitmapLoader;	import com.flashgangsta.managers.MappingManager;	import flash.geom.Rectangle;			public class Friendslist extends MovieClip {				private static const STEP_TIME:int = 13;		private static const DISABLED_BTN_ALPHA = .3;				private var lineLength:int;		private var itemsContainer:Sprite = new Sprite();		private var leftBlock:MovieClip;		private var rightBlock:MovieClip;		private var maskRect:MovieClip;		private var prevOne:MovieClip;		private var prevFive:MovieClip;		private var prevAll:MovieClip;		private var nextOne:MovieClip;		private var nextFive:MovieClip;		private var nextAll:MovieClip;		private var leftBorder:MovieClip;		private var rightBorder:MovieClip;		private var addFriend:MovieClip;		private var tweenParams:Object;		private var startPosition:int;		private var currentPosition:int = 0;		private var maxPosition:int;		private var stepSize:int;		private var displayCount:int;		private var avatar:MovieClip;		private var avatarMotion:MovieClip;		private var inviteMe:MovieClip;		private var body:MovieClip;		private var patternPlace:MovieClip;		private var pattern:FriendlistPattern = new FriendlistPattern();		private var lineEdges:int;		private var maskEdges:int = 8;		private var addFriendCount:int;		private var addFriendItems:Array = [];		private var loader:BitmapLoader;				/**		 * Конструктор		 */				public function Friendslist() {			addEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, init );						leftBlock = leftBlock_mc;			rightBlock = rightBlock_mc;			maskRect = lineMask_mc;			prevOne = leftBlock.prevOne_mc;			prevFive = leftBlock.prevFive_mc;			prevAll = leftBlock.prevAll_mc;			nextOne = rightBlock.nextOne_mc;			nextFive = rightBlock.nextFive_mc;			nextAll = rightBlock.nextAll_mc;			leftBorder = leftBlock_mc.leftBorder_mc;			rightBorder = rightBlock.rightBorder_mc;			addFriend = addFriend_mc;			tweenParams = { useFrames: true, transition: "easeInOutQuad" };			avatar = rightBlock.avatar_mc;			avatarMotion = rightBlock.avatarMotion_mc;			inviteMe = rightBlock.inviteMe_mc;			body = body_mc;			patternPlace = patternPlace_mc;						Helper.getDispatcher().addEventListener( Event.RESIZE, resize );						lineEdges = ScreenController.WIDTH - maskRect.width;						avatarMotion.gotoAndStop( 1 );						if( Friends.allFriendsList.length ) {				var rnd:int = Math.round( Math.random() * ( Friends.allFriendsList.length - 1 ) );				var friend:Object = Friends.getFriendFromAll( rnd );				loader = new BitmapLoader( friend[ Friends.PHOTO_MEDIUM ], avatar, BitmapLoader.SCALE_FILL, BitmapLoader.ALIGN_CENTER_TOP );				loader.addEventListener( Event.COMPLETE, onFriendToInviteLoaded );			}						ButtonManager.addButton( prevOne, null, goPrev );			ButtonManager.addButton( prevFive, null, goPrev );			ButtonManager.addButton( prevAll, null, goPrev );			ButtonManager.addButton( nextOne, null, goNext );			ButtonManager.addButton( nextFive, null, goNext );			ButtonManager.addButton( nextAll, null, goNext );						ButtonManager.addButton( addFriend, null, addFriendHandler );						fillFriends();						resize();					}				/**		* Заполняет ленту		*/				private function fillFriends():void {						for( var i:int = 0; i < Friends.friendsList.length; i++ ) {				var friendItem:FriendsListItem = new FriendsListItem( Friends.getFriend( i )[ Friends.PHOTO_MEDIUM ] );				friendItem.x = ( friendItem.width * i );				itemsContainer.addChild( friendItem );			}						stepSize = addFriend.width;			addFriend.y = 0;			addFriend.x = ( stepSize * i );			itemsContainer.addChild( addFriend );			addFriendCount = i;									itemsContainer.x = startPosition = maskRect.x + ( maskEdges / 2 );			itemsContainer.y = maskRect.y;			addChild( itemsContainer );					}				/**		 * Обновляет ленту после смены режима экрана		 * Удаляет/добавляет слоты		 */				private function updateLine():void {			lineLength = Math.floor( ( Helper.getScreenController().getScreenRect().width - lineEdges ) / addFriend.width );			displayCount = Math.floor( maskRect.width / stepSize );						//Убирает лишние кнопки приглашения друзей			for ( var j:int = 0; j < addFriendItems.length; j++ ) {				var copy:MovieClip = addFriendItems[ j ];				ButtonManager.removeButton( copy );				itemsContainer.removeChild( copy );			}						addFriendItems = [];						//Добавляет кнопки приглашения друзей						for( var i:int = addFriendItems.length + 1; i < lineLength - Friends.friendsList.length; i++ ) {				var addFriendCopy:MovieClip = new AddFriendButton();				addFriendCopy.x = ( stepSize * ( addFriendCount + i ) );				itemsContainer.addChild( addFriendCopy );				ButtonManager.addButton( addFriendCopy, null, addFriendHandler );				addFriendItems.push( addFriendCopy );			}						maxPosition = Friends.friendsList.length - lineLength + 1 + addFriendItems.length;						currentPosition = 0;			itemsContainer.x = startPosition;						updateControls();					}				/**		 * Обнавляет состояние и отображение кнопок перемотки ленты		 */				private function updateControls():void {			if( itemsContainer.width > maskRect.width ) {				itemsContainer.mask = maskRect;				ButtonManager.setButtonEnable( prevOne, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevFive, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevAll, false, true, DISABLED_BTN_ALPHA );								ButtonManager.setButtonEnable( nextOne, true, true );				ButtonManager.setButtonEnable( nextFive, true, true );				ButtonManager.setButtonEnable( nextAll, true, true );							} else {				ButtonManager.setButtonEnable( prevOne, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevFive, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevAll, false, true, DISABLED_BTN_ALPHA );								ButtonManager.setButtonEnable( nextOne, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( nextFive, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( nextAll, false, true, DISABLED_BTN_ALPHA );			}		}				/**		* Матает ленту вперёд		*/				private function goNext( target:MovieClip ):void {						if( currentPosition === 0 ) {				ButtonManager.setButtonEnable( prevOne, true, true );				ButtonManager.setButtonEnable( prevFive, true, true );				ButtonManager.setButtonEnable( prevAll, true, true );			}						if( target === nextOne ) {				// сдвиг на 1				tweenParams.time = Friendslist.STEP_TIME;				currentPosition++;			} else if( target === nextFive ) {				// сдвиг на 5				tweenParams.time = Friendslist.STEP_TIME * 2;				currentPosition = Math.min( maxPosition, currentPosition + 5 );				tweenParams.x = startPosition - ( stepSize * currentPosition ); 			} else {				// сдвиг в конец				tweenParams.time = Friendslist.STEP_TIME * 2;				currentPosition = maxPosition;				tweenParams.x = startPosition - ( stepSize * currentPosition ); 			}						tweenParams.x = startPosition - ( stepSize * currentPosition );						if( currentPosition === maxPosition ) {				ButtonManager.setButtonEnable( nextOne, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( nextFive, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( nextAll, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonState( nextOne, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonState( nextFive, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonState( nextAll, ButtonManager.STATE_NORMAL );			}						if( Tweener.isTweening( itemsContainer ) ) {				tweenParams.transition = "easeOutQuad";				tweenParams.onComplete = resetTransition;			}						Tweener.addTween( itemsContainer, tweenParams );		}						/**		* Матает назад		*/				private function goPrev( target:MovieClip ):void {						if( currentPosition === maxPosition ) {				ButtonManager.setButtonEnable( nextOne, true, true );				ButtonManager.setButtonEnable( nextFive, true, true );				ButtonManager.setButtonEnable( nextAll, true, true );			}						if( target === prevOne ) {				// сдвиг на 1				tweenParams.time = Friendslist.STEP_TIME;				currentPosition--;			} else if( target === prevFive ) {				// сдвиг на 5				tweenParams.time = Friendslist.STEP_TIME * 2;				currentPosition = Math.max( 0, currentPosition - 5 );			} else {				tweenParams.time = Friendslist.STEP_TIME * 2;				currentPosition = 0;			}						tweenParams.x = startPosition - ( stepSize * currentPosition );						if( currentPosition === 0 ) {				ButtonManager.setButtonEnable( prevOne, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevFive, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonEnable( prevAll, false, true, DISABLED_BTN_ALPHA );				ButtonManager.setButtonState( prevOne, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonState( prevFive, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonState( prevAll, ButtonManager.STATE_NORMAL );			}						if( Tweener.isTweening( itemsContainer ) ) {				tweenParams.transition = "easeOutQuad";				tweenParams.onComplete = resetTransition;			}						Tweener.addTween( itemsContainer, tweenParams );		}				/**		 * Сбрасывает тип анимации на стандартный		 */				private function resetTransition():void {			tweenParams.transition = "easeInOutQuad";		}				/**		 * Обработка нажатия кнопки добавления друга		 * @param	target		 */				private function addFriendHandler( target:MovieClip ):void {			//TODO: Новая иерархия			//Main.vkCon.callMethod( "showInviteBox" );		}				/**		 * Обрабока окончания загрузки друга для отображения в меню запроса на приглашение		 */				private function onFriendToInviteLoaded( event:Event ):void {			loader.removeEventListener( Event.COMPLETE, onFriendToInviteLoaded );			ButtonManager.addButton( avatarMotion, null, addFriendHandler );			rightBlock.addChild( inviteMe );			inviteMe.alpha = 0;			inviteMe.visible = true;			Tweener.addTween( inviteMe, { alpha: 1, y: inviteMe.y - 10, useFrames: true, time: 20, delay: 10, transition: "OutCubic" } );		}				/**		 * Обеновление позиционирования и размера ленты при смене режима экрана		 * @param	event		 */				private function resize( event:Event = null ):void {			var rect:Rectangle = Helper.getScreenController().getScreenRect();						lineLength = Math.floor( ( rect.width - lineEdges ) / addFriend.width );			maskRect.width = lineLength * addFriend.width + ( maskEdges / 2 );			rightBlock.x = maskRect.x + maskRect.width;						body.width = rightBlock.x + rightBlock.width + 10;						y = Math.ceil( rect.y + rect.height - body.height );			x = MappingManager.getCentricPoint( rect.width, body.width ) + rect.x;						patternPlace.graphics.clear();			patternPlace.graphics.beginBitmapFill( pattern );			patternPlace.graphics.drawRect( 0, 0, rightBlock.x - patternPlace.x, leftBlock.height );			patternPlace.graphics.endFill();						updateLine();					}			}	}