package com.rr {	import com.rr.popups.PopupsFactory;	import com.rr.utils.ComponentManager;	import flash.display.Stage;	import flash.events.EventDispatcher;	//TODO: вынести сюда Main.dialogs	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class Helper {						/// Список моделей персонажей		private static var personageModels:PersonageModels = new PersonageModels();		/// Список моделей предметов		private static var itemModels:ItemModels = new ItemModels();		/// Данные об игроке, владельце клиента		private static var profile:Profile = new Profile();		/// Диспатчер		private static var dispatcher:EventDispatcher = new EventDispatcher();		/// Ссылка на stage		private static var stage:Stage;		/// Объект отвечающий за отображение попап-окон		private static var popupsFactory:PopupsFactory = new PopupsFactory();		/// Объект отвечающий за изменения связанные с переключением режима экрана		private static var screenController:ScreenController = new ScreenController();		/// Объект упраляющий игровыми компонентами		private static var componentManager:ComponentManager = new ComponentManager();		/// Шапка		private static var header:Header;		private static var pageViewer:PageViewer = new PageViewer();				/**		 * Конструктор		 */				public function Helper() {			throw new Error( "Helper is a static class and can not be initialized" );		}				/**		 * Записывает в память модели персонажей		 * @param	list		 */				internal static function setPersonageModels( list:Array ):void {			personageModels.record( list );		}				/**		 * Возвращает список моделей персонажей		 * @return		 */				public static function getPersonageModels():PersonageModels {			return personageModels;		}				/**		 * Записывает в память модели предметов и персонажей		 * @param	list		 */				internal static function setItemModels( list:Array ):void {			itemModels.record( list );		}				/**		 * Возвращает список моделей предметов и персонажей		 * @return		 */				public static function getItemModels():ItemModels {			return itemModels;		}				/**		 * Записывает профайл		 * @param	personalData Список данных о пользователа из соц. сети		 * @param	userData Список игровых данных о профиле пользователя		 * @param	userItems Список купленных игроком предметов		 */				internal static function setProfile( personalData:Object, userData:Object ):void {			profile.record( personalData, userData );		}				/**		 * Возвращает профайл пользователя		 * @return		 */				public static function getProfile():Profile {			return Helper.profile;		}				/**		 * Возвращает диспатчер		 */				public static function getDispatcher():EventDispatcher {			return dispatcher;		}				/**		 * Записывает ссылку на stage		 * @param	stage		 */				public static function setStage( stage:Stage ):void {			Helper.stage = stage;		}				/**		 * Возвращает ссылку на stage		 * @return		 */				public static function getStage():Stage {			return Helper.stage;		}				/**		 * Возвращает ссылку на объект отвечающий за отображение попап-окон		 * @return		 */				public static function getPopupsFactory():PopupsFactory {			return popupsFactory;		}				/**		 * Объект отвечающий за изменения режима экрана		 */				public static function getScreenController():ScreenController {			return Helper.screenController;		}				/**		 * Объект управляющий компонентами		 * @return		 */				public static function getComponentManager():ComponentManager {			return Helper.componentManager;		}				/**		 * Возвращает ссылку на шапку		 * @return		 */				public static function getHeader():Header {			if( !header ) header = new Header();			return header;		}				public static function getPageViewer():PageViewer {			return pageViewer;		}			}}