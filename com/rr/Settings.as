package com.rr {		import flash.display.MovieClip;	import flash.events.Event;	import com.flashgangsta.managers.ButtonManager;	import caurina.transitions.Tweener;	import flash.display.StageDisplayState;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;	import flash.geom.Rectangle;			public class Settings extends MovieClip {				private var settingsBtnClose:MovieClip;		private var settingsBtnOpen:MovieClip;		private var arrow:MovieClip;		private var maskObj:MovieClip;		private var buttons:MovieClip;		private var fullscreenBtn:MovieClip;		private var musicBtn:MovieClip;		private var soundsBtn:MovieClip;		private var arrowUpPoint:int;		private var arrowDownPoint:int;		private var arrowTween:Object = { useFrames: true, time: 15 };		private var buttonsTween:Object = { useFrames: true, transition: "easeInOutCubic", time: 15 };				/**		 * Конструктор		 */				public function Settings() {			addEventListener( Event.ADDED_TO_STAGE, init );		}				/**		 * Инициализация		 * @param	event		 */				private function init( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, init );						settingsBtnClose = getChildByName( "settingsBtnClose_mc" ) as MovieClip;			settingsBtnOpen = getChildByName( "settingsBtnOpen_mc" ) as MovieClip;			arrow = getChildByName( "arrow_mc" ) as MovieClip;			maskObj = getChildByName( "mask_mc" ) as MovieClip;			buttons = getChildByName( "buttons_mc" ) as MovieClip;			fullscreenBtn = buttons.fullscreenBtn_mc;			musicBtn = buttons.musicBtn_mc;			soundsBtn = buttons.soundsBtn_mc;						Helper.getDispatcher().addEventListener( Event.RESIZE, resize );						buttons.mask = maskObj;						arrowDownPoint = arrow.y;			arrowUpPoint = arrowDownPoint - 20;						ButtonManager.addButton( settingsBtnClose, null, openSettings, onRollOut, null, onRollOver, onRollOut );			ButtonManager.addButton( settingsBtnOpen, null, closeSettings );			ButtonManager.addButton( fullscreenBtn );			fullscreenBtn.addEventListener( MouseEvent.CLICK, changeScreenMode );			ButtonManager.addButton( musicBtn, null, changeMusicMode );			ButtonManager.addButton( soundsBtn, null, changeSoundsMode );						stage.addEventListener( FullScreenEvent.FULL_SCREEN, onScreenModeChanged );						resize();					}				/**		 * Обновление позиционирования при смене режима экрана 		 */				private function resize( event:Event = null ):void {			var rect:Rectangle = Helper.getScreenController().getScreenRect();			x = rect.x + rect.width - settingsBtnClose.width - Main.MARGIN;			y = rect.y + rect.height - settingsBtnClose.height - 120;		}				/**		 * Обработка наведения мыши на кнопку меню		 * @param	target		 */				private function onRollOver( target:MovieClip ):void {			if( !settingsBtnClose.visible ) return;			arrowTween.transition = "easeOutCublic";			arrowTween.y = arrowUpPoint;			Tweener.addTween( arrow, arrowTween );		}				/**		 * Обработка уведения мыши с кнопки меню		 * @param	target		 */				private function onRollOut( target:MovieClip ):void {			if( !settingsBtnClose.visible ) return;			arrowTween.transition = "easeInCublic";			arrowTween.y = arrowDownPoint;			Tweener.addTween( arrow, arrowTween );		}				/**		 * Открывает настройки		 * @param	target		 */				private function openSettings( target:MovieClip ):void {			settingsBtnClose.visible = false;			settingsBtnOpen.visible = true;			arrow.y = arrowDownPoint;			buttonsTween.y = maskObj.y;			Tweener.addTween( buttons, buttonsTween );		}				/**		 * Закрывает настройки		 * @param	target		 */				private function closeSettings( target:MovieClip ):void {			settingsBtnClose.visible = true;			settingsBtnOpen.visible = false;			arrow.y = arrowUpPoint;			buttonsTween.y = maskObj.y + maskObj.height;			Tweener.addTween( buttons, buttonsTween );		}				/**		 * Меняет состояние экрана		 * @param	target		 */				private function changeScreenMode( event:MouseEvent ):void {			trace( "CLICKED" );			if( stage.displayState === StageDisplayState.FULL_SCREEN ) {				stage.displayState = StageDisplayState.NORMAL;			} else {				stage.displayState = StageDisplayState.FULL_SCREEN;			}		}				/**		 * Меняет состояние проигрывания музыки		 * @param	target		 */				private function changeMusicMode( target:MovieClip ):void {			target.ico_mc.gotoAndStop( target.ico_mc.currentFrameLabel === "on" ? "off" : "on" );		}				/**		 * Меняет состояние проигрывания звуковых спецэффектов		 * @param	target		 */				private function changeSoundsMode( target:MovieClip ):void {			target.ico_mc.gotoAndStop( target.ico_mc.currentFrameLabel === "on" ? "off" : "on" );		}				/**		 * Обработка смены режима экрана		 * @param	event		 */				private function onScreenModeChanged( event:FullScreenEvent ):void {			event.fullScreen ? fullscreenBtn.ico_mc.gotoAndStop( "on" ) : fullscreenBtn.ico_mc.gotoAndStop( "off" );		}			}	}