package com.rr.personage {	import com.rr.Main;	import com.rr.PersonageData;	import flash.display.Loader;	import flash.events.IOErrorEvent;	import flash.system.ApplicationDomain;	import flash.system.SecurityDomain;	import flash.net.URLRequest;	import com.flashgangsta.managers.MappingManager;	import flash.display.MovieClip;	import flash.events.Event;	import flash.system.LoaderContext;	import flash.geom.ColorTransform;		public class PersonagePreview {				/// Параметры перса		private var _data:PersonageData;		/// Параметры контейнера		private var _cont:MovieClip;		/// Морда		private var preview:MovieClip;		/// Загрузчик		private var loader:Loader;						/// Голова		private var head:MovieClip;		/// Обводка головы		private var headStr:MovieClip;		/// Обводка правого глаза		private var eyeRightStr:MovieClip;		/// Обводка левого глаза		private var eyeLeftStr:MovieClip;		/// Правая бровь		private var eyeBrowRight:MovieClip;		/// Обводка правой брови		private var eyeBrowRightStr:MovieClip;		/// Левая бровь		private var eyeBrowLeft:MovieClip;		/// Обводка левой брови		private var eyeBrowLeftStr:MovieClip;		/// Обводка рта		private var mouthStr:MovieClip;		/// Веко правое		private var eyelidRight:MovieClip;		/// Веко левое		private var eyelidLeft:MovieClip;						/**		 * Конструктор		 * @param	data		 * @param	cont		 */				public function PersonagePreview( data:PersonageData, cont:MovieClip ) {			_data = data;			_cont = cont;			loadPreview();		}				/**		 * Начинает загрузку превью персонажа		 */				private function loadPreview():void {			loader = new Loader();			loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onLoaded );			loader.contentLoaderInfo.addEventListener( IOErrorEvent.IO_ERROR, onIOError );			var loaderContext:LoaderContext = Main.isDebugMode ? null : new LoaderContext( false, ApplicationDomain.currentDomain, SecurityDomain.currentDomain );			loader.load( new URLRequest( _data.previewPath ), loaderContext );		}				/**		 * Обработка ошибки загрузки		 * @param	event		 */				private function onIOError( event:IOErrorEvent ):void {			trace( "Ошибка загрузки превью персонажа", _data.pid, ":", _data.previewPath, event.text );			removeLoader();		}				/**		 * Обработка окончания загрузки превью персонажа		 * @param	event		 */				private function onLoaded( event:Event ):void {			MappingManager.setAlign( loader.content, _cont.getBounds( _cont ) );			_cont.addChild( loader.content );			preview = MovieClip( loader.content ).avatar_mc;			removeLoader();			setColor();		}				/**		 * Удаляет загрузчик и все его слушатели		 */				private function removeLoader():void {			loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, onLoaded );			loader.contentLoaderInfo.removeEventListener( IOErrorEvent.IO_ERROR, onIOError );			loader = null;		}				/**		 * Устанавливает цвет		 */				private function setColor():void {			head = preview.headColor_mc;			headStr = preview.headContur_mc.item_mc;			eyeRightStr = preview.eyeRightContur_mc.item_mc;			eyeLeftStr = preview.eyeLeftContur_mc.item_mc;			eyeBrowRight = preview.eyeBrowRightColor_mc.item_mc;			eyeBrowRightStr = preview.eyeBrowRightContur_mc.item_mc;			eyeBrowLeft = preview.eyeBrowLeftColor_mc.item_mc;			eyeBrowLeftStr = preview.eyeBrowLeftContur_mc.item_mc;			mouthStr = preview.mouthContur_mc.item_mc;			eyelidRight = preview.eyelidRightColor_mc.item_mc;			eyelidLeft = preview.eyelidLeftColor_mc.item_mc;			var colorItems:Vector.<MovieClip> = new Vector.<MovieClip>();			colorItems.push( head, headStr, eyeRightStr, eyeLeftStr, eyeBrowRight, eyeBrowRightStr, eyeBrowLeft, eyeBrowLeftStr, mouthStr, eyelidRight, eyelidLeft );			var colorTrans:ColorTransform = new ColorTransform();			colorTrans.color = _data.color;						for( var i:int = 0; i < colorItems.length; i++ ) {				colorItems[ i ].transform.colorTransform = colorTrans;			}								}			}	}